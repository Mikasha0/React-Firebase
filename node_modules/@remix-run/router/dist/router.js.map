{"version":3,"file":"router.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined)\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to as Location)?.key || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface AgnosticRouteObject {\n  caseSensitive?: boolean;\n  children?: AgnosticRouteObject[];\n  index?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n}\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport interface AgnosticDataRouteObject extends AgnosticRouteObject {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n}\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n    let dataRoute: AgnosticDataRouteObject = {\n      ...route,\n      id,\n      children: route.children\n        ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n        : undefined,\n    };\n    return dataRoute;\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : { ...toArg };\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.subscriber?.(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.subscriber?.(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    this.subscriber?.(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  invariant,\n  isRouteErrorResponse,\n  matchRoutes,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouterMatch] for a revalidating fetcher.load()\n */\ntype RevalidatingFetcher = [string, string, AgnosticDataRouteMatch];\n\n/**\n * Tuple of [href, DataRouteMatch] for an active fetcher.load()\n */\ntype FetchLoadMatch = [string, AgnosticDataRouteMatch];\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData?.loaderData || {},\n    actionData: init.hydrationData?.actionData || null,\n    errors: init.hydrationData?.errors || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController?.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\";\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts?.state);\n    let historyAction =\n      opts?.replace === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts?.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController?.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = opts?.startUninterruptedRevalidation === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = opts?.preventScrollReset === true;\n\n    let loadingNavigation = opts?.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts?.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts?.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts?.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts?.submission,\n      opts?.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch);\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(result, redirectNavigation, opts?.replace);\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if (opts?.replace !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !matches?.some((m) => m.route.id === routeId) ||\n        matchesToLoad?.some((m) => m.route.id === routeId)\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match]);\n    handleFetcherLoader(key, routeId, path, match);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let { error } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(staleKey)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController?.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch\n  ) {\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) => callLoaderOrAction(\"loader\", request, m)),\n      ...fetchersToLoad.map(([, href, match]) =>\n        callLoaderOrAction(\"loader\", createRequest(href, request.signal), match)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[]\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let { location, result } = await queryImpl(request);\n    if (result instanceof Response) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, ...result };\n  }\n\n  async function queryRoute(request: Request, routeId: string): Promise<any> {\n    let { result } = await queryImpl(request, routeId);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.errors, result.actionData, result.loaderData].find(\n      (v) => v\n    );\n    let value = Object.values(routeData || {})[0];\n\n    if (isRouteErrorResponse(value)) {\n      return new Response(value.data, {\n        status: value.status,\n        statusText: value.statusText,\n      });\n    }\n\n    return value;\n  }\n\n  async function queryImpl(\n    request: Request,\n    routeId?: string\n  ): Promise<{\n    location: Location;\n    result: Omit<StaticHandlerContext, \"location\"> | Response;\n  }> {\n    invariant(\n      request.method !== \"HEAD\",\n      \"query()/queryRoute() do not support HEAD requests\"\n    );\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    let { location, matches, shortCircuitState } = matchRequest(\n      request,\n      routeId\n    );\n\n    try {\n      if (shortCircuitState) {\n        return { location, result: shortCircuitState };\n      }\n\n      if (request.method !== \"GET\") {\n        let result = await submit(\n          request,\n          matches,\n          getTargetMatch(matches, location),\n          routeId != null\n        );\n        return { location, result };\n      }\n\n      let result = await loadRouteData(request, matches, routeId != null);\n      return {\n        location,\n        result: {\n          ...result,\n          actionData: null,\n          actionHeaders: {},\n        },\n      };\n    } catch (e) {\n      if (e instanceof Response) {\n        return { location, result: e };\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    let result: DataResult;\n    if (!actionMatch.route.action) {\n      let href = createHref(new URL(request.url));\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // calLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error,\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {},\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, isRouteRequest, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches, isRouteRequest);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<StaticHandlerContext, \"location\" | \"actionData\" | \"actionHeaders\">\n    | Response\n  > {\n    let matchesToLoad = getLoaderMatchesUntilBoundary(\n      matches,\n      Object.keys(pendingActionError || {})[0]\n    ).filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(\"loader\", request, m, true, isRouteRequest)\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  function matchRequest(\n    req: Request,\n    routeId?: string\n  ): {\n    location: Location;\n    matches: AgnosticDataRouteMatch[];\n    routeMatch?: AgnosticDataRouteMatch;\n    shortCircuitState?: Omit<StaticHandlerContext, \"location\">;\n  } {\n    let url = new URL(req.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n    if (matches && routeId) {\n      matches = matches.filter((m) => m.route.id === routeId);\n    }\n\n    // Short circuit with a 404 if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        shortCircuitState: {\n          matches: notFoundMatches,\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [route.id]: error,\n          },\n          statusCode: 404,\n          loaderHeaders: {},\n          actionHeaders: {},\n        },\n      };\n    }\n\n    return { location, matches };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(parsePath(path)),\n        formEncType: opts?.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(\n        400,\n        \"Bad Request\",\n        \"Cannot submit binary form data using GET\"\n      ),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches?.forEach(([href, match], key) => {\n    // This fetcher was cancelled from a prior action submission - force reload\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(\n        href,\n        match,\n        submission,\n        href,\n        match,\n        isRevalidationRequired,\n        actionResult\n      );\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentMatch.route.path?.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  skipRedirects: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping\n    if (isRouteRequest) {\n      throw result;\n    }\n\n    if (status >= 300 && status <= 399 && location != null) {\n      // Don't process redirects in the router during SSR document requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect\n      if (skipRedirects) {\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    let data: any;\n    if (result.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds?.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!errors?.[boundaryMatch.route.id]) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(\n    (r) => r.index || r.path === \"\" || r.path === \"/\"\n  ) || {\n    id: \"__shim-404-route__\",\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null),\n  };\n}\n\nfunction getMethodNotAllowedResult(path: Location | string): ErrorResult {\n  let href = typeof path === \"string\" ? path : createHref(path);\n  console.warn(\n    \"You're trying to submit to a route that does not have an action.  To \" +\n      \"fix this, please add an `action` function to the route for \" +\n      `[${href}]`\n  );\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(\n      405,\n      \"Method Not Allowed\",\n      `No action found for [${href}]`\n    ),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return result?.type === ResultType.redirect;\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      currentLoaderData?.[match.route.id] !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    !hasNakedIndexQuery(search || \"\")\n  ) {\n    return matches.slice(-2)[0];\n  }\n  return matches.slice(-1)[0];\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","state","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","route","treePath","id","join","invariant","has","add","dataRoute","children","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeys","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","handleLoaders","result","actionMatch","getTargetMatch","getMethodNotAllowedResult","callLoaderOrAction","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","routeId","revalidatingFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","fetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","unstable_createStaticHandler","query","queryImpl","queryRoute","routeData","find","values","method","shortCircuitState","matchRequest","submit","loadRouteData","actionHeaders","isRouteRequest","URL","Location","statusCode","loaderHeaders","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","req","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","searchParams","convertFormDataToSearchParams","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","includes","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","type","skipRedirects","resultType","onReject","handler","text","deferred","toUpperCase","body","Request","URLSearchParams","append","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","isFetcher","isRevalidatingLoader","unwrap","hasNakedIndexQuery","getAll","handle","origin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEA;;AAEG;IACSA,OAAZ;;AAAA,CAAA,UAAYA,MAAZ,EAAkB;AAChB;;;;;;AAMG;AACHA,EAAAA,MAAA,CAAA,KAAA,CAAA,GAAA,KAAA,CAAA;AAEA;;;;AAIG;;AACHA,EAAAA,MAAA,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA;AAEA;;;AAGG;;AACHA,EAAAA,MAAA,CAAA,SAAA,CAAA,GAAA,SAAA,CAAA;AACD,CAtBD,EAAYA,MAAM,KAANA,MAAM,GAsBjB,EAtBiB,CAAlB,CAAA,CAAA;;AAkKA,MAAMC,iBAAiB,GAAG,UAA1B,CAAA;AA+BA;;;AAGG;;AACa,SAAAC,mBAAA,CACdC,OADc,EACoB;AAAA,EAAA,IAAlCA,OAAkC,KAAA,KAAA,CAAA,EAAA;AAAlCA,IAAAA,OAAkC,GAAF,EAAE,CAAA;AAAA,GAAA;;EAElC,IAAI;IAAEC,cAAc,GAAG,CAAC,GAAD,CAAnB;IAA0BC,YAA1B;AAAwCC,IAAAA,QAAQ,GAAG,KAAA;AAAnD,GAAA,GAA6DH,OAAjE,CAAA;EACA,IAAII,OAAJ,CAHkC;;EAIlCA,OAAO,GAAGH,cAAc,CAACI,GAAf,CAAmB,CAACC,KAAD,EAAQC,KAAR,KAC3BC,oBAAoB,CAACF,KAAD,EAAQ,IAAR,EAAcC,KAAK,KAAK,CAAV,GAAc,SAAd,GAA0BE,SAAxC,CADZ,CAAV,CAAA;AAGA,EAAA,IAAIF,KAAK,GAAGG,UAAU,CACpBR,YAAY,IAAI,IAAhB,GAAuBE,OAAO,CAACO,MAAR,GAAiB,CAAxC,GAA4CT,YADxB,CAAtB,CAAA;AAGA,EAAA,IAAIU,MAAM,GAAGf,MAAM,CAACgB,GAApB,CAAA;EACA,IAAIC,QAAQ,GAAoB,IAAhC,CAAA;;EAEA,SAASJ,UAAT,CAAoBK,CAApB,EAA6B;AAC3B,IAAA,OAAOC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,GAAL,CAASH,CAAT,EAAY,CAAZ,CAAT,EAAyBX,OAAO,CAACO,MAAR,GAAiB,CAA1C,CAAP,CAAA;AACD,GAAA;;AACD,EAAA,SAASQ,kBAAT,GAA2B;IACzB,OAAOf,OAAO,CAACG,KAAD,CAAd,CAAA;AACD,GAAA;;AACD,EAAA,SAASC,oBAAT,CACEY,EADF,EAEEC,KAFF,EAGEC,GAHF,EAGc;AAAA,IAAA,IADZD,KACY,KAAA,KAAA,CAAA,EAAA;AADZA,MAAAA,KACY,GADC,IACD,CAAA;AAAA,KAAA;;AAEZ,IAAA,IAAIE,QAAQ,GAAGC,cAAc,CAC3BpB,OAAO,GAAGe,kBAAkB,EAAA,CAAGM,QAAxB,GAAmC,GADf,EAE3BL,EAF2B,EAG3BC,KAH2B,EAI3BC,GAJ2B,CAA7B,CAAA;AAMAI,IAAAA,SAAO,CACLH,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyB,CAAzB,CAAgC,KAAA,GAD3B,+DAEsDC,IAAI,CAACC,SAAL,CACzDT,EADyD,CAFtD,CAAP,CAAA;AAMA,IAAA,OAAOG,QAAP,CAAA;AACD,GAAA;;AAED,EAAA,IAAIO,OAAO,GAAkB;AAC3B,IAAA,IAAIvB,KAAJ,GAAS;AACP,MAAA,OAAOA,KAAP,CAAA;KAFyB;;AAI3B,IAAA,IAAIK,MAAJ,GAAU;AACR,MAAA,OAAOA,MAAP,CAAA;KALyB;;AAO3B,IAAA,IAAIW,QAAJ,GAAY;AACV,MAAA,OAAOJ,kBAAkB,EAAzB,CAAA;KARyB;;IAU3BY,UAAU,CAACX,EAAD,EAAG;MACX,OAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BY,UAAU,CAACZ,EAAD,CAA/C,CAAA;KAXyB;;AAa3Ba,IAAAA,IAAI,CAACb,EAAD,EAAKC,KAAL,EAAU;MACZT,MAAM,GAAGf,MAAM,CAACqC,IAAhB,CAAA;AACA,MAAA,IAAIC,YAAY,GAAG3B,oBAAoB,CAACY,EAAD,EAAKC,KAAL,CAAvC,CAAA;AACAd,MAAAA,KAAK,IAAI,CAAT,CAAA;MACAH,OAAO,CAACgC,MAAR,CAAe7B,KAAf,EAAsBH,OAAO,CAACO,MAA9B,EAAsCwB,YAAtC,CAAA,CAAA;;MACA,IAAIhC,QAAQ,IAAIW,QAAhB,EAA0B;AACxBA,QAAAA,QAAQ,CAAC;UAAEF,MAAF;AAAUW,UAAAA,QAAQ,EAAEY,YAAAA;AAApB,SAAD,CAAR,CAAA;AACD,OAAA;KApBwB;;AAsB3BE,IAAAA,OAAO,CAACjB,EAAD,EAAKC,KAAL,EAAU;MACfT,MAAM,GAAGf,MAAM,CAACyC,OAAhB,CAAA;AACA,MAAA,IAAIH,YAAY,GAAG3B,oBAAoB,CAACY,EAAD,EAAKC,KAAL,CAAvC,CAAA;AACAjB,MAAAA,OAAO,CAACG,KAAD,CAAP,GAAiB4B,YAAjB,CAAA;;MACA,IAAIhC,QAAQ,IAAIW,QAAhB,EAA0B;AACxBA,QAAAA,QAAQ,CAAC;UAAEF,MAAF;AAAUW,UAAAA,QAAQ,EAAEY,YAAAA;AAApB,SAAD,CAAR,CAAA;AACD,OAAA;KA5BwB;;IA8B3BI,EAAE,CAACC,KAAD,EAAM;MACN5B,MAAM,GAAGf,MAAM,CAACgB,GAAhB,CAAA;AACAN,MAAAA,KAAK,GAAGG,UAAU,CAACH,KAAK,GAAGiC,KAAT,CAAlB,CAAA;;AACA,MAAA,IAAI1B,QAAJ,EAAc;AACZA,QAAAA,QAAQ,CAAC;UAAEF,MAAF;AAAUW,UAAAA,QAAQ,EAAEJ,kBAAkB,EAAA;AAAtC,SAAD,CAAR,CAAA;AACD,OAAA;KAnCwB;;IAqC3BsB,MAAM,CAACC,EAAD,EAAa;AACjB5B,MAAAA,QAAQ,GAAG4B,EAAX,CAAA;AACA,MAAA,OAAO,MAAK;AACV5B,QAAAA,QAAQ,GAAG,IAAX,CAAA;OADF,CAAA;AAGD,KAAA;;GA1CH,CAAA;AA6CA,EAAA,OAAOgB,OAAP,CAAA;AACD,CAAA;AAkBD;;;;;;AAMG;;AACa,SAAAa,oBAAA,CACd3C,OADc,EACqB;AAAA,EAAA,IAAnCA,OAAmC,KAAA,KAAA,CAAA,EAAA;AAAnCA,IAAAA,OAAmC,GAAF,EAAE,CAAA;AAAA,GAAA;;AAEnC,EAAA,SAAS4C,qBAAT,CACEC,MADF,EAEEC,aAFF,EAEkC;AAAA,IAAA,IAAA,oBAAA,EAAA,qBAAA,CAAA;;IAEhC,IAAI;MAAErB,QAAF;MAAYsB,MAAZ;AAAoBC,MAAAA,IAAAA;KAASH,GAAAA,MAAM,CAACtB,QAAxC,CAAA;IACA,OAAOC,cAAc,CACnB,EADmB,EAEnB;MAAEC,QAAF;MAAYsB,MAAZ;AAAoBC,MAAAA,IAAAA;AAApB,KAFmB;AAInB,IAAA,CAAA,CAAA,oBAAA,GAAAF,aAAa,CAACzB,KAAd,KAAqB4B,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oBAAAA,CAAAA,GAArB,KAA4B,IAJT,EAKnB,CAAAH,CAAAA,qBAAAA,GAAAA,aAAa,CAACzB,KAAd,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAqBC,GAArB,KAA4B,SALT,CAArB,CAAA;AAOD,GAAA;;AAED,EAAA,SAAS4B,iBAAT,CAA2BL,MAA3B,EAA2CzB,EAA3C,EAAiD;IAC/C,OAAO,OAAOA,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BY,UAAU,CAACZ,EAAD,CAA/C,CAAA;AACD,GAAA;;EAED,OAAO+B,kBAAkB,CACvBP,qBADuB,EAEvBM,iBAFuB,EAGvB,IAHuB,EAIvBlD,OAJuB,CAAzB,CAAA;AAMD,CAAA;AAsBD;;;;;;;AAOG;;AACa,SAAAoD,iBAAA,CACdpD,OADc,EACkB;AAAA,EAAA,IAAhCA,OAAgC,KAAA,KAAA,CAAA,EAAA;AAAhCA,IAAAA,OAAgC,GAAF,EAAE,CAAA;AAAA,GAAA;;AAEhC,EAAA,SAASqD,kBAAT,CACER,MADF,EAEEC,aAFF,EAEkC;AAAA,IAAA,IAAA,qBAAA,EAAA,qBAAA,CAAA;;IAEhC,IAAI;AACFrB,MAAAA,QAAQ,GAAG,GADT;AAEFsB,MAAAA,MAAM,GAAG,EAFP;AAGFC,MAAAA,IAAI,GAAG,EAAA;AAHL,KAAA,GAIAM,SAAS,CAACT,MAAM,CAACtB,QAAP,CAAgByB,IAAhB,CAAqBO,MAArB,CAA4B,CAA5B,CAAD,CAJb,CAAA;IAKA,OAAO/B,cAAc,CACnB,EADmB,EAEnB;MAAEC,QAAF;MAAYsB,MAAZ;AAAoBC,MAAAA,IAAAA;AAApB,KAFmB;AAInB,IAAA,CAAA,CAAA,qBAAA,GAAAF,aAAa,CAACzB,KAAd,KAAqB4B,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAAA,CAAAA,GAArB,KAA4B,IAJT,EAKnB,CAAAH,CAAAA,qBAAAA,GAAAA,aAAa,CAACzB,KAAd,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAAqBC,GAArB,KAA4B,SALT,CAArB,CAAA;AAOD,GAAA;;AAED,EAAA,SAASkC,cAAT,CAAwBX,MAAxB,EAAwCzB,EAAxC,EAA8C;IAC5C,IAAIqC,IAAI,GAAGZ,MAAM,CAACa,QAAP,CAAgBC,aAAhB,CAA8B,MAA9B,CAAX,CAAA;IACA,IAAIC,IAAI,GAAG,EAAX,CAAA;;IAEA,IAAIH,IAAI,IAAIA,IAAI,CAACI,YAAL,CAAkB,MAAlB,CAAZ,EAAuC;AACrC,MAAA,IAAIC,GAAG,GAAGjB,MAAM,CAACtB,QAAP,CAAgBqC,IAA1B,CAAA;AACA,MAAA,IAAIG,SAAS,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,CAAhB,CAAA;AACAJ,MAAAA,IAAI,GAAGG,SAAS,KAAK,CAAC,CAAf,GAAmBD,GAAnB,GAAyBA,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAaF,SAAb,CAAhC,CAAA;AACD,KAAA;;AAED,IAAA,OAAOH,IAAI,GAAG,GAAP,IAAc,OAAOxC,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BY,UAAU,CAACZ,EAAD,CAAtD,CAAP,CAAA;AACD,GAAA;;AAED,EAAA,SAAS8C,oBAAT,CAA8B3C,QAA9B,EAAkDH,EAAlD,EAAwD;AACtDM,IAAAA,SAAO,CACLH,QAAQ,CAACE,QAAT,CAAkBE,MAAlB,CAAyB,CAAzB,CAAgC,KAAA,GAD3B,iEAEwDC,IAAI,CAACC,SAAL,CAC3DT,EAD2D,CAFxD,GAAP,GAAA,CAAA,CAAA;AAMD,GAAA;;EAED,OAAO+B,kBAAkB,CACvBE,kBADuB,EAEvBG,cAFuB,EAGvBU,oBAHuB,EAIvBlE,OAJuB,CAAzB,CAAA;AAMD;AAGD;AACA;AACA;;AAEA,SAAS0B,SAAT,CAAiByC,IAAjB,EAA4BC,OAA5B,EAA2C;EACzC,IAAI,CAACD,IAAL,EAAW;AACT;IACA,IAAI,OAAOE,OAAP,KAAmB,WAAvB,EAAoCA,OAAO,CAACC,IAAR,CAAaF,OAAb,CAAA,CAAA;;IAEpC,IAAI;AACF;AACA;AACA;AACA;AACA;AACA,MAAA,MAAM,IAAIG,KAAJ,CAAUH,OAAV,CAAN,CANE;AAQH,KARD,CAQE,OAAOI,CAAP,EAAU,EAAE;AACf,GAAA;AACF,CAAA;;AAED,SAASC,SAAT,GAAkB;AAChB,EAAA,OAAOzD,IAAI,CAAC0D,MAAL,EAAA,CAAcC,QAAd,CAAuB,EAAvB,CAAA,CAA2BpB,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAP,CAAA;AACD,CAAA;AAED;;AAEG;;;AACH,SAASqB,eAAT,CAAyBrD,QAAzB,EAA2C;EACzC,OAAO;IACL0B,GAAG,EAAE1B,QAAQ,CAACF,KADT;IAELC,GAAG,EAAEC,QAAQ,CAACD,GAAAA;GAFhB,CAAA;AAID,CAAA;AAED;;AAEG;;;AACG,SAAUE,cAAV,CACJqD,OADI,EAEJzD,EAFI,EAGJC,KAHI,EAIJC,GAJI,EAIQ;AAAA,EAAA,IADZD,KACY,KAAA,KAAA,CAAA,EAAA;AADZA,IAAAA,KACY,GADC,IACD,CAAA;AAAA,GAAA;;AAEZ,EAAA,IAAIE,QAAQ,GAAA,QAAA,CAAA;IACVE,QAAQ,EAAE,OAAOoD,OAAP,KAAmB,QAAnB,GAA8BA,OAA9B,GAAwCA,OAAO,CAACpD,QADhD;AAEVsB,IAAAA,MAAM,EAAE,EAFE;AAGVC,IAAAA,IAAI,EAAE,EAAA;GACF,EAAA,OAAO5B,EAAP,KAAc,QAAd,GAAyBkC,SAAS,CAAClC,EAAD,CAAlC,GAAyCA,EAJnC,EAAA;IAKVC,KALU;AAMV;AACA;AACA;AACA;IACAC,GAAG,EAAG,CAAAF,EAAe,IAAf,IAAA,GAAA,KAAA,CAAA,GAAAA,EAAe,CAAEE,GAAjB,KAAwBA,GAAxB,IAA+BmD,SAAS,EAAA;GAVhD,CAAA,CAAA;;AAYA,EAAA,OAAOlD,QAAP,CAAA;AACD,CAAA;AAED;;AAEG;;AACa,SAAAS,UAAA,CAIA,IAAA,EAAA;EAAA,IAJW;AACzBP,IAAAA,QAAQ,GAAG,GADc;AAEzBsB,IAAAA,MAAM,GAAG,EAFgB;AAGzBC,IAAAA,IAAI,GAAG,EAAA;GACO,GAAA,IAAA,CAAA;AACd,EAAA,IAAID,MAAM,IAAIA,MAAM,KAAK,GAAzB,EACEtB,QAAQ,IAAIsB,MAAM,CAACpB,MAAP,CAAc,CAAd,CAAqB,KAAA,GAArB,GAA2BoB,MAA3B,GAAoC,MAAMA,MAAtD,CAAA;AACF,EAAA,IAAIC,IAAI,IAAIA,IAAI,KAAK,GAArB,EACEvB,QAAQ,IAAIuB,IAAI,CAACrB,MAAL,CAAY,CAAZ,CAAmB,KAAA,GAAnB,GAAyBqB,IAAzB,GAAgC,MAAMA,IAAlD,CAAA;AACF,EAAA,OAAOvB,QAAP,CAAA;AACD,CAAA;AAED;;AAEG;;AACG,SAAU6B,SAAV,CAAoBwB,IAApB,EAAgC;EACpC,IAAIC,UAAU,GAAkB,EAAhC,CAAA;;AAEA,EAAA,IAAID,IAAJ,EAAU;AACR,IAAA,IAAIf,SAAS,GAAGe,IAAI,CAACd,OAAL,CAAa,GAAb,CAAhB,CAAA;;IACA,IAAID,SAAS,IAAI,CAAjB,EAAoB;MAClBgB,UAAU,CAAC/B,IAAX,GAAkB8B,IAAI,CAACvB,MAAL,CAAYQ,SAAZ,CAAlB,CAAA;MACAe,IAAI,GAAGA,IAAI,CAACvB,MAAL,CAAY,CAAZ,EAAeQ,SAAf,CAAP,CAAA;AACD,KAAA;;AAED,IAAA,IAAIiB,WAAW,GAAGF,IAAI,CAACd,OAAL,CAAa,GAAb,CAAlB,CAAA;;IACA,IAAIgB,WAAW,IAAI,CAAnB,EAAsB;MACpBD,UAAU,CAAChC,MAAX,GAAoB+B,IAAI,CAACvB,MAAL,CAAYyB,WAAZ,CAApB,CAAA;MACAF,IAAI,GAAGA,IAAI,CAACvB,MAAL,CAAY,CAAZ,EAAeyB,WAAf,CAAP,CAAA;AACD,KAAA;;AAED,IAAA,IAAIF,IAAJ,EAAU;MACRC,UAAU,CAACtD,QAAX,GAAsBqD,IAAtB,CAAA;AACD,KAAA;AACF,GAAA;;AAED,EAAA,OAAOC,UAAP,CAAA;AACD,CAAA;;AASD,SAAS5B,kBAAT,CACE8B,WADF,EAEElD,UAFF,EAGEmD,gBAHF,EAIElF,OAJF,EAIiC;AAAA,EAAA,IAA/BA,OAA+B,KAAA,KAAA,CAAA,EAAA;AAA/BA,IAAAA,OAA+B,GAAF,EAAE,CAAA;AAAA,GAAA;;EAE/B,IAAI;IAAE6C,MAAM,GAAGa,QAAQ,CAACyB,WAApB;AAAkChF,IAAAA,QAAQ,GAAG,KAAA;AAA7C,GAAA,GAAuDH,OAA3D,CAAA;AACA,EAAA,IAAI8C,aAAa,GAAGD,MAAM,CAACf,OAA3B,CAAA;AACA,EAAA,IAAIlB,MAAM,GAAGf,MAAM,CAACgB,GAApB,CAAA;EACA,IAAIC,QAAQ,GAAoB,IAAhC,CAAA;;AAEA,EAAA,SAASsE,SAAT,GAAkB;IAChBxE,MAAM,GAAGf,MAAM,CAACgB,GAAhB,CAAA;;AACA,IAAA,IAAIC,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAAC;QAAEF,MAAF;QAAUW,QAAQ,EAAEO,OAAO,CAACP,QAAAA;AAA5B,OAAD,CAAR,CAAA;AACD,KAAA;AACF,GAAA;;AAED,EAAA,SAASU,IAAT,CAAcb,EAAd,EAAsBC,KAAtB,EAAiC;IAC/BT,MAAM,GAAGf,MAAM,CAACqC,IAAhB,CAAA;IACA,IAAIX,QAAQ,GAAGC,cAAc,CAACM,OAAO,CAACP,QAAT,EAAmBH,EAAnB,EAAuBC,KAAvB,CAA7B,CAAA;AACA6D,IAAAA,gBAAgB,QAAhB,GAAAA,KAAAA,CAAAA,GAAAA,gBAAgB,CAAG3D,QAAH,EAAaH,EAAb,CAAhB,CAAA;AAEA,IAAA,IAAIiE,YAAY,GAAGT,eAAe,CAACrD,QAAD,CAAlC,CAAA;IACA,IAAIuC,GAAG,GAAGhC,OAAO,CAACC,UAAR,CAAmBR,QAAnB,CAAV,CAN+B;;IAS/B,IAAI;AACFuB,MAAAA,aAAa,CAACwC,SAAd,CAAwBD,YAAxB,EAAsC,EAAtC,EAA0CvB,GAA1C,CAAA,CAAA;KADF,CAEE,OAAOyB,KAAP,EAAc;AACd;AACA;AACA1C,MAAAA,MAAM,CAACtB,QAAP,CAAgBiE,MAAhB,CAAuB1B,GAAvB,CAAA,CAAA;AACD,KAAA;;IAED,IAAI3D,QAAQ,IAAIW,QAAhB,EAA0B;AACxBA,MAAAA,QAAQ,CAAC;QAAEF,MAAF;AAAUW,QAAAA,QAAAA;AAAV,OAAD,CAAR,CAAA;AACD,KAAA;AACF,GAAA;;AAED,EAAA,SAASc,OAAT,CAAiBjB,EAAjB,EAAyBC,KAAzB,EAAoC;IAClCT,MAAM,GAAGf,MAAM,CAACyC,OAAhB,CAAA;IACA,IAAIf,QAAQ,GAAGC,cAAc,CAACM,OAAO,CAACP,QAAT,EAAmBH,EAAnB,EAAuBC,KAAvB,CAA7B,CAAA;AACA6D,IAAAA,gBAAgB,QAAhB,GAAAA,KAAAA,CAAAA,GAAAA,gBAAgB,CAAG3D,QAAH,EAAaH,EAAb,CAAhB,CAAA;AAEA,IAAA,IAAIiE,YAAY,GAAGT,eAAe,CAACrD,QAAD,CAAlC,CAAA;AACA,IAAA,IAAIuC,GAAG,GAAGhC,OAAO,CAACC,UAAR,CAAmBR,QAAnB,CAAV,CAAA;AACAuB,IAAAA,aAAa,CAAC2C,YAAd,CAA2BJ,YAA3B,EAAyC,EAAzC,EAA6CvB,GAA7C,CAAA,CAAA;;IAEA,IAAI3D,QAAQ,IAAIW,QAAhB,EAA0B;AACxBA,MAAAA,QAAQ,CAAC;QAAEF,MAAF;AAAUW,QAAAA,QAAQ,EAAEA,QAAAA;AAApB,OAAD,CAAR,CAAA;AACD,KAAA;AACF,GAAA;;AAED,EAAA,IAAIO,OAAO,GAAY;AACrB,IAAA,IAAIlB,MAAJ,GAAU;AACR,MAAA,OAAOA,MAAP,CAAA;KAFmB;;AAIrB,IAAA,IAAIW,QAAJ,GAAY;AACV,MAAA,OAAO0D,WAAW,CAACpC,MAAD,EAASC,aAAT,CAAlB,CAAA;KALmB;;IAOrBL,MAAM,CAACC,EAAD,EAAa;AACjB,MAAA,IAAI5B,QAAJ,EAAc;AACZ,QAAA,MAAM,IAAIyD,KAAJ,CAAU,4CAAV,CAAN,CAAA;AACD,OAAA;;AACD1B,MAAAA,MAAM,CAAC6C,gBAAP,CAAwB5F,iBAAxB,EAA2CsF,SAA3C,CAAA,CAAA;AACAtE,MAAAA,QAAQ,GAAG4B,EAAX,CAAA;AAEA,MAAA,OAAO,MAAK;AACVG,QAAAA,MAAM,CAAC8C,mBAAP,CAA2B7F,iBAA3B,EAA8CsF,SAA9C,CAAA,CAAA;AACAtE,QAAAA,QAAQ,GAAG,IAAX,CAAA;OAFF,CAAA;KAdmB;;IAmBrBiB,UAAU,CAACX,EAAD,EAAG;AACX,MAAA,OAAOW,UAAU,CAACc,MAAD,EAASzB,EAAT,CAAjB,CAAA;KApBmB;;IAsBrBa,IAtBqB;IAuBrBI,OAvBqB;;IAwBrBE,EAAE,CAACxB,CAAD,EAAE;AACF,MAAA,OAAO+B,aAAa,CAACP,EAAd,CAAiBxB,CAAjB,CAAP,CAAA;AACD,KAAA;;GA1BH,CAAA;AA6BA,EAAA,OAAOe,OAAP,CAAA;AACD;;AC9lBD,IAAY8D,UAAZ,CAAA;;AAAA,CAAA,UAAYA,UAAZ,EAAsB;AACpBA,EAAAA,UAAA,CAAA,MAAA,CAAA,GAAA,MAAA,CAAA;AACAA,EAAAA,UAAA,CAAA,UAAA,CAAA,GAAA,UAAA,CAAA;AACAA,EAAAA,UAAA,CAAA,UAAA,CAAA,GAAA,UAAA,CAAA;AACAA,EAAAA,UAAA,CAAA,OAAA,CAAA,GAAA,OAAA,CAAA;AACD,CALD,EAAYA,UAAU,KAAVA,UAAU,GAKrB,EALqB,CAAtB;AAgOA;;;AACM,SAAUC,yBAAV,CACJC,MADI,EAEJC,UAFI,EAGJC,MAHI,EAGmC;AAAA,EAAA,IADvCD,UACuC,KAAA,KAAA,CAAA,EAAA;AADvCA,IAAAA,UACuC,GADhB,EACgB,CAAA;AAAA,GAAA;;AAAA,EAAA,IAAvCC,MAAuC,KAAA,KAAA,CAAA,EAAA;IAAvCA,MAAuC,GAAjB,IAAIC,GAAJ,EAAiB,CAAA;AAAA,GAAA;;EAEvC,OAAOH,MAAM,CAACzF,GAAP,CAAW,CAAC6F,KAAD,EAAQ3F,KAAR,KAAiB;AACjC,IAAA,IAAI4F,QAAQ,GAAG,CAAC,GAAGJ,UAAJ,EAAgBxF,KAAhB,CAAf,CAAA;AACA,IAAA,IAAI6F,EAAE,GAAG,OAAOF,KAAK,CAACE,EAAb,KAAoB,QAApB,GAA+BF,KAAK,CAACE,EAArC,GAA0CD,QAAQ,CAACE,IAAT,CAAc,GAAd,CAAnD,CAAA;AACAC,IAAAA,SAAS,CACP,CAACN,MAAM,CAACO,GAAP,CAAWH,EAAX,CADM,EAEP,qCAAA,GAAqCA,EAArC,GAAA,aAAA,GACE,wDAHK,CAAT,CAAA;IAKAJ,MAAM,CAACQ,GAAP,CAAWJ,EAAX,CAAA,CAAA;;IACA,IAAIK,SAAS,gBACRP,KADQ,EAAA;MAEXE,EAFW;AAGXM,MAAAA,QAAQ,EAAER,KAAK,CAACQ,QAAN,GACNb,yBAAyB,CAACK,KAAK,CAACQ,QAAP,EAAiBP,QAAjB,EAA2BH,MAA3B,CADnB,GAENvF,SAAAA;KALN,CAAA,CAAA;;AAOA,IAAA,OAAOgG,SAAP,CAAA;AACD,GAjBM,CAAP,CAAA;AAkBD,CAAA;AAED;;;;AAIG;;AACG,SAAUE,WAAV,CAGJb,MAHI,EAIJc,WAJI,EAKJC,QALI,EAKU;AAAA,EAAA,IAAdA,QAAc,KAAA,KAAA,CAAA,EAAA;AAAdA,IAAAA,QAAc,GAAH,GAAG,CAAA;AAAA,GAAA;;AAEd,EAAA,IAAItF,QAAQ,GACV,OAAOqF,WAAP,KAAuB,QAAvB,GAAkCtD,SAAS,CAACsD,WAAD,CAA3C,GAA2DA,WAD7D,CAAA;EAGA,IAAInF,QAAQ,GAAGqF,aAAa,CAACvF,QAAQ,CAACE,QAAT,IAAqB,GAAtB,EAA2BoF,QAA3B,CAA5B,CAAA;;EAEA,IAAIpF,QAAQ,IAAI,IAAhB,EAAsB;AACpB,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;AAED,EAAA,IAAIsF,QAAQ,GAAGC,aAAa,CAAClB,MAAD,CAA5B,CAAA;EACAmB,iBAAiB,CAACF,QAAD,CAAjB,CAAA;EAEA,IAAIG,OAAO,GAAG,IAAd,CAAA;;AACA,EAAA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBD,OAAO,IAAI,IAAX,IAAmBC,CAAC,GAAGJ,QAAQ,CAACpG,MAAhD,EAAwD,EAAEwG,CAA1D,EAA6D;IAC3DD,OAAO,GAAGE,gBAAgB,CAA0BL,QAAQ,CAACI,CAAD,CAAlC,EAAuC1F,QAAvC,CAA1B,CAAA;AACD,GAAA;;AAED,EAAA,OAAOyF,OAAP,CAAA;AACD,CAAA;;AAmBD,SAASF,aAAT,CAGElB,MAHF,EAIEiB,QAJF,EAKEM,WALF,EAMEtB,UANF,EAMiB;AAAA,EAAA,IAFfgB,QAEe,KAAA,KAAA,CAAA,EAAA;AAFfA,IAAAA,QAEe,GAF4B,EAE5B,CAAA;AAAA,GAAA;;AAAA,EAAA,IADfM,WACe,KAAA,KAAA,CAAA,EAAA;AADfA,IAAAA,WACe,GAD6B,EAC7B,CAAA;AAAA,GAAA;;AAAA,EAAA,IAAftB,UAAe,KAAA,KAAA,CAAA,EAAA;AAAfA,IAAAA,UAAe,GAAF,EAAE,CAAA;AAAA,GAAA;;AAEfD,EAAAA,MAAM,CAACwB,OAAP,CAAe,CAACpB,KAAD,EAAQ3F,KAAR,KAAiB;AAC9B,IAAA,IAAIgH,IAAI,GAA+B;AACrCC,MAAAA,YAAY,EAAEtB,KAAK,CAACpB,IAAN,IAAc,EADS;AAErC2C,MAAAA,aAAa,EAAEvB,KAAK,CAACuB,aAAN,KAAwB,IAFF;AAGrCC,MAAAA,aAAa,EAAEnH,KAHsB;AAIrC2F,MAAAA,KAAAA;KAJF,CAAA;;IAOA,IAAIqB,IAAI,CAACC,YAAL,CAAkBG,UAAlB,CAA6B,GAA7B,CAAJ,EAAuC;AACrCrB,MAAAA,SAAS,CACPiB,IAAI,CAACC,YAAL,CAAkBG,UAAlB,CAA6B5B,UAA7B,CADO,EAEP,2BAAwBwB,IAAI,CAACC,YAA7B,GACMzB,uBAAAA,IAAAA,IAAAA,GAAAA,UADN,oHAFO,CAAT,CAAA;AAOAwB,MAAAA,IAAI,CAACC,YAAL,GAAoBD,IAAI,CAACC,YAAL,CAAkBvD,KAAlB,CAAwB8B,UAAU,CAACpF,MAAnC,CAApB,CAAA;AACD,KAAA;;IAED,IAAImE,IAAI,GAAG8C,SAAS,CAAC,CAAC7B,UAAD,EAAawB,IAAI,CAACC,YAAlB,CAAD,CAApB,CAAA;IACA,IAAIK,UAAU,GAAGR,WAAW,CAACS,MAAZ,CAAmBP,IAAnB,CAAjB,CApB8B;AAuB9B;AACA;;IACA,IAAIrB,KAAK,CAACQ,QAAN,IAAkBR,KAAK,CAACQ,QAAN,CAAe/F,MAAf,GAAwB,CAA9C,EAAiD;MAC/C2F,SAAS,CACPJ,KAAK,CAAC3F,KAAN,KAAgB,IADT,EAEP,yDAAA,IAAA,qCAAA,GACuCuE,IADvC,GAAA,KAAA,CAFO,CAAT,CAAA;MAMAkC,aAAa,CAACd,KAAK,CAACQ,QAAP,EAAiBK,QAAjB,EAA2Bc,UAA3B,EAAuC/C,IAAvC,CAAb,CAAA;AACD,KAjC6B;AAoC9B;;;IACA,IAAIoB,KAAK,CAACpB,IAAN,IAAc,IAAd,IAAsB,CAACoB,KAAK,CAAC3F,KAAjC,EAAwC;AACtC,MAAA,OAAA;AACD,KAAA;;IAEDwG,QAAQ,CAAC9E,IAAT,CAAc;MAAE6C,IAAF;MAAQiD,KAAK,EAAEC,YAAY,CAAClD,IAAD,EAAOoB,KAAK,CAAC3F,KAAb,CAA3B;AAAgDsH,MAAAA,UAAAA;KAA9D,CAAA,CAAA;GAzCF,CAAA,CAAA;AA4CA,EAAA,OAAOd,QAAP,CAAA;AACD,CAAA;;AAED,SAASE,iBAAT,CAA2BF,QAA3B,EAAkD;EAChDA,QAAQ,CAACkB,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KACZD,CAAC,CAACH,KAAF,KAAYI,CAAC,CAACJ,KAAd,GACII,CAAC,CAACJ,KAAF,GAAUG,CAAC,CAACH,KADhB;IAEIK,cAAc,CACZF,CAAC,CAACL,UAAF,CAAaxH,GAAb,CAAkBkH,IAAD,IAAUA,IAAI,CAACG,aAAhC,CADY,EAEZS,CAAC,CAACN,UAAF,CAAaxH,GAAb,CAAkBkH,IAAD,IAAUA,IAAI,CAACG,aAAhC,CAFY,CAHpB,CAAA,CAAA;AAQD,CAAA;;AAED,MAAMW,OAAO,GAAG,QAAhB,CAAA;AACA,MAAMC,mBAAmB,GAAG,CAA5B,CAAA;AACA,MAAMC,eAAe,GAAG,CAAxB,CAAA;AACA,MAAMC,iBAAiB,GAAG,CAA1B,CAAA;AACA,MAAMC,kBAAkB,GAAG,EAA3B,CAAA;AACA,MAAMC,YAAY,GAAG,CAAC,CAAtB,CAAA;;AACA,MAAMC,OAAO,GAAIC,CAAD,IAAeA,CAAC,KAAK,GAArC,CAAA;;AAEA,SAASZ,YAAT,CAAsBlD,IAAtB,EAAoCvE,KAApC,EAA8D;AAC5D,EAAA,IAAIsI,QAAQ,GAAG/D,IAAI,CAACgE,KAAL,CAAW,GAAX,CAAf,CAAA;AACA,EAAA,IAAIC,YAAY,GAAGF,QAAQ,CAAClI,MAA5B,CAAA;;AACA,EAAA,IAAIkI,QAAQ,CAACG,IAAT,CAAcL,OAAd,CAAJ,EAA4B;AAC1BI,IAAAA,YAAY,IAAIL,YAAhB,CAAA;AACD,GAAA;;AAED,EAAA,IAAInI,KAAJ,EAAW;AACTwI,IAAAA,YAAY,IAAIR,eAAhB,CAAA;AACD,GAAA;;AAED,EAAA,OAAOM,QAAQ,CACZI,MADI,CACIL,CAAD,IAAO,CAACD,OAAO,CAACC,CAAD,CADlB,CAEJM,CAAAA,MAFI,CAGH,CAACnB,KAAD,EAAQoB,OAAR,KACEpB,KAAK,IACJM,OAAO,CAACe,IAAR,CAAaD,OAAb,CAAA,GACGb,mBADH,GAEGa,OAAO,KAAK,EAAZ,GACAX,iBADA,GAEAC,kBALC,CAJJ,EAUHM,YAVG,CAAP,CAAA;AAYD,CAAA;;AAED,SAASX,cAAT,CAAwBF,CAAxB,EAAqCC,CAArC,EAAgD;AAC9C,EAAA,IAAIkB,QAAQ,GACVnB,CAAC,CAACvH,MAAF,KAAawH,CAAC,CAACxH,MAAf,IAAyBuH,CAAC,CAACjE,KAAF,CAAQ,CAAR,EAAW,CAAC,CAAZ,CAAeqF,CAAAA,KAAf,CAAqB,CAACvI,CAAD,EAAIoG,CAAJ,KAAUpG,CAAC,KAAKoH,CAAC,CAAChB,CAAD,CAAtC,CAD3B,CAAA;AAGA,EAAA,OAAOkC,QAAQ;AAEX;AACA;AACA;AACAnB,EAAAA,CAAC,CAACA,CAAC,CAACvH,MAAF,GAAW,CAAZ,CAAD,GAAkBwH,CAAC,CAACA,CAAC,CAACxH,MAAF,GAAW,CAAZ,CALR;AAOX;EACA,CARJ,CAAA;AASD,CAAA;;AAED,SAASyG,gBAAT,CAIEmC,MAJF,EAKE9H,QALF,EAKkB;EAEhB,IAAI;AAAEoG,IAAAA,UAAAA;AAAF,GAAA,GAAiB0B,MAArB,CAAA;EAEA,IAAIC,aAAa,GAAG,EAApB,CAAA;EACA,IAAIC,eAAe,GAAG,GAAtB,CAAA;EACA,IAAIvC,OAAO,GAAoD,EAA/D,CAAA;;AACA,EAAA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGU,UAAU,CAAClH,MAA/B,EAAuC,EAAEwG,CAAzC,EAA4C;AAC1C,IAAA,IAAII,IAAI,GAAGM,UAAU,CAACV,CAAD,CAArB,CAAA;IACA,IAAIuC,GAAG,GAAGvC,CAAC,KAAKU,UAAU,CAAClH,MAAX,GAAoB,CAApC,CAAA;AACA,IAAA,IAAIgJ,iBAAiB,GACnBF,eAAe,KAAK,GAApB,GACIhI,QADJ,GAEIA,QAAQ,CAACwC,KAAT,CAAewF,eAAe,CAAC9I,MAA/B,KAA0C,GAHhD,CAAA;IAIA,IAAIiJ,KAAK,GAAGC,SAAS,CACnB;MAAE/E,IAAI,EAAEyC,IAAI,CAACC,YAAb;MAA2BC,aAAa,EAAEF,IAAI,CAACE,aAA/C;AAA8DiC,MAAAA,GAAAA;KAD3C,EAEnBC,iBAFmB,CAArB,CAAA;AAKA,IAAA,IAAI,CAACC,KAAL,EAAY,OAAO,IAAP,CAAA;AAEZE,IAAAA,MAAM,CAACtE,MAAP,CAAcgE,aAAd,EAA6BI,KAAK,CAACG,MAAnC,CAAA,CAAA;AAEA,IAAA,IAAI7D,KAAK,GAAGqB,IAAI,CAACrB,KAAjB,CAAA;IAEAgB,OAAO,CAACjF,IAAR,CAAa;AACX;AACA8H,MAAAA,MAAM,EAAEP,aAFG;MAGX/H,QAAQ,EAAEmG,SAAS,CAAC,CAAC6B,eAAD,EAAkBG,KAAK,CAACnI,QAAxB,CAAD,CAHR;AAIXuI,MAAAA,YAAY,EAAEC,iBAAiB,CAC7BrC,SAAS,CAAC,CAAC6B,eAAD,EAAkBG,KAAK,CAACI,YAAxB,CAAD,CADoB,CAJpB;AAOX9D,MAAAA,KAAAA;KAPF,CAAA,CAAA;;AAUA,IAAA,IAAI0D,KAAK,CAACI,YAAN,KAAuB,GAA3B,EAAgC;MAC9BP,eAAe,GAAG7B,SAAS,CAAC,CAAC6B,eAAD,EAAkBG,KAAK,CAACI,YAAxB,CAAD,CAA3B,CAAA;AACD,KAAA;AACF,GAAA;;AAED,EAAA,OAAO9C,OAAP,CAAA;AACD,CAAA;AAED;;;;AAIG;;;SACagD,aACdpF,MACAiF,QAEa;AAAA,EAAA,IAFbA,MAEa,KAAA,KAAA,CAAA,EAAA;AAFbA,IAAAA,MAEa,GAAT,EAAS,CAAA;AAAA,GAAA;;EAEb,OAAOjF,IAAI,CACRzC,OADI,CACI,SADJ,EACe,CAAC8H,CAAD,EAAI7I,GAAJ,KAA4B;IAC9CgF,SAAS,CAACyD,MAAM,CAACzI,GAAD,CAAN,IAAe,IAAhB,EAAmCA,aAAAA,GAAAA,GAAnC,GAAT,UAAA,CAAA,CAAA;IACA,OAAOyI,MAAM,CAACzI,GAAD,CAAb,CAAA;AACD,GAJI,CAKJe,CAAAA,OALI,CAKI,SALJ,EAKe,CAAC8H,CAAD,EAAIC,MAAJ,EAAYC,EAAZ,EAAgBC,GAAhB,KAAuB;IACzC,MAAMC,IAAI,GAAG,GAAb,CAAA;;AAEA,IAAA,IAAIR,MAAM,CAACQ,IAAD,CAAN,IAAgB,IAApB,EAA0B;AACxB;AACA;AACA,MAAA,OAAOD,GAAG,KAAK,IAAR,GAAe,GAAf,GAAqB,EAA5B,CAAA;AACD,KAPwC;;;AAUzC,IAAA,OAAA,EAAA,GAAUF,MAAV,GAAmBL,MAAM,CAACQ,IAAD,CAAzB,CAAA;AACD,GAhBI,CAAP,CAAA;AAiBD,CAAA;AAiDD;;;;;AAKG;;AACa,SAAAV,SAAA,CAIdW,OAJc,EAKd/I,QALc,EAKE;AAEhB,EAAA,IAAI,OAAO+I,OAAP,KAAmB,QAAvB,EAAiC;AAC/BA,IAAAA,OAAO,GAAG;AAAE1F,MAAAA,IAAI,EAAE0F,OAAR;AAAiB/C,MAAAA,aAAa,EAAE,KAAhC;AAAuCiC,MAAAA,GAAG,EAAE,IAAA;KAAtD,CAAA;AACD,GAAA;;AAED,EAAA,IAAI,CAACe,OAAD,EAAUC,UAAV,CAAwBC,GAAAA,WAAW,CACrCH,OAAO,CAAC1F,IAD6B,EAErC0F,OAAO,CAAC/C,aAF6B,EAGrC+C,OAAO,CAACd,GAH6B,CAAvC,CAAA;AAMA,EAAA,IAAIE,KAAK,GAAGnI,QAAQ,CAACmI,KAAT,CAAea,OAAf,CAAZ,CAAA;AACA,EAAA,IAAI,CAACb,KAAL,EAAY,OAAO,IAAP,CAAA;AAEZ,EAAA,IAAIH,eAAe,GAAGG,KAAK,CAAC,CAAD,CAA3B,CAAA;EACA,IAAII,YAAY,GAAGP,eAAe,CAACpH,OAAhB,CAAwB,SAAxB,EAAmC,IAAnC,CAAnB,CAAA;AACA,EAAA,IAAIuI,aAAa,GAAGhB,KAAK,CAAC3F,KAAN,CAAY,CAAZ,CAApB,CAAA;AACA,EAAA,IAAI8F,MAAM,GAAWW,UAAU,CAACxB,MAAX,CACnB,CAAC2B,IAAD,EAAOC,SAAP,EAAkBvK,KAAlB,KAA2B;AACzB;AACA;IACA,IAAIuK,SAAS,KAAK,GAAlB,EAAuB;AACrB,MAAA,IAAIC,UAAU,GAAGH,aAAa,CAACrK,KAAD,CAAb,IAAwB,EAAzC,CAAA;MACAyJ,YAAY,GAAGP,eAAe,CAC3BxF,KADY,CACN,CADM,EACHwF,eAAe,CAAC9I,MAAhB,GAAyBoK,UAAU,CAACpK,MADjC,CAEZ0B,CAAAA,OAFY,CAEJ,SAFI,EAEO,IAFP,CAAf,CAAA;AAGD,KAAA;;AAEDwI,IAAAA,IAAI,CAACC,SAAD,CAAJ,GAAkBE,wBAAwB,CACxCJ,aAAa,CAACrK,KAAD,CAAb,IAAwB,EADgB,EAExCuK,SAFwC,CAA1C,CAAA;AAIA,IAAA,OAAOD,IAAP,CAAA;GAfiB,EAiBnB,EAjBmB,CAArB,CAAA;EAoBA,OAAO;IACLd,MADK;AAELtI,IAAAA,QAAQ,EAAEgI,eAFL;IAGLO,YAHK;AAILQ,IAAAA,OAAAA;GAJF,CAAA;AAMD,CAAA;;AAED,SAASG,WAAT,CACE7F,IADF,EAEE2C,aAFF,EAGEiC,GAHF,EAGY;AAAA,EAAA,IADVjC,aACU,KAAA,KAAA,CAAA,EAAA;AADVA,IAAAA,aACU,GADM,KACN,CAAA;AAAA,GAAA;;AAAA,EAAA,IAAViC,GAAU,KAAA,KAAA,CAAA,EAAA;AAAVA,IAAAA,GAAU,GAAJ,IAAI,CAAA;AAAA,GAAA;;AAEVhI,EAAAA,OAAO,CACLoD,IAAI,KAAK,GAAT,IAAgB,CAACA,IAAI,CAACmG,QAAL,CAAc,GAAd,CAAjB,IAAuCnG,IAAI,CAACmG,QAAL,CAAc,IAAd,CADlC,EAEL,eAAenG,GAAAA,IAAf,iDACMA,IAAI,CAACzC,OAAL,CAAa,KAAb,EAAoB,IAApB,CADN,wJAGsCyC,IAAI,CAACzC,OAAL,CAAa,KAAb,EAAoB,IAApB,CAHtC,SAFK,CAAP,CAAA;EAQA,IAAIqI,UAAU,GAAa,EAA3B,CAAA;EACA,IAAIQ,YAAY,GACd,GAAA,GACApG,IAAI,CACDzC,OADH,CACW,SADX,EACsB,EADtB,CAC0B;AAD1B,GAEGA,OAFH,CAEW,MAFX,EAEmB,GAFnB,CAEwB;AAFxB,GAGGA,OAHH,CAGW,qBAHX,EAGkC,MAHlC,CAG0C;GACvCA,OAJH,CAIW,SAJX,EAIsB,CAAC8H,CAAD,EAAYW,SAAZ,KAAiC;IACnDJ,UAAU,CAACzI,IAAX,CAAgB6I,SAAhB,CAAA,CAAA;AACA,IAAA,OAAO,WAAP,CAAA;AACD,GAPH,CAFF,CAAA;;AAWA,EAAA,IAAIhG,IAAI,CAACmG,QAAL,CAAc,GAAd,CAAJ,EAAwB;IACtBP,UAAU,CAACzI,IAAX,CAAgB,GAAhB,CAAA,CAAA;IACAiJ,YAAY,IACVpG,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,IAAzB,GACI,OADJ;MAEI,mBAHN,CAFsB;AAMvB,GAND,MAMO;AACLoG,IAAAA,YAAY,IAAIxB,GAAG,GACf,OADe;;AAGf;AACA;AACA;AACA;AACA;IACA,uCARJ,CAAA;AASD,GAAA;;AAED,EAAA,IAAIe,OAAO,GAAG,IAAIU,MAAJ,CAAWD,YAAX,EAAyBzD,aAAa,GAAGhH,SAAH,GAAe,GAArD,CAAd,CAAA;AAEA,EAAA,OAAO,CAACgK,OAAD,EAAUC,UAAV,CAAP,CAAA;AACD,CAAA;;AAED,SAASM,wBAAT,CAAkCI,KAAlC,EAAiDN,SAAjD,EAAkE;EAChE,IAAI;IACF,OAAOO,kBAAkB,CAACD,KAAD,CAAzB,CAAA;GADF,CAEE,OAAO7F,KAAP,EAAc;IACd7D,OAAO,CACL,KADK,EAEL,gCAAgCoJ,GAAAA,SAAhC,0DACkBM,KADlB,GAAA,iDAAA,CAAA,IAAA,kCAAA,GAEqC7F,KAFrC,GAAA,IAAA,CAFK,CAAP,CAAA;AAOA,IAAA,OAAO6F,KAAP,CAAA;AACD,GAAA;AACF,CAAA;AAED;;AAEG;;;AACa,SAAAtE,aAAA,CACdrF,QADc,EAEdoF,QAFc,EAEE;AAEhB,EAAA,IAAIA,QAAQ,KAAK,GAAjB,EAAsB,OAAOpF,QAAP,CAAA;;AAEtB,EAAA,IAAI,CAACA,QAAQ,CAAC6J,WAAT,EAAuB3D,CAAAA,UAAvB,CAAkCd,QAAQ,CAACyE,WAAT,EAAlC,CAAL,EAAgE;AAC9D,IAAA,OAAO,IAAP,CAAA;AACD,GANe;AAShB;;;AACA,EAAA,IAAIC,UAAU,GAAG1E,QAAQ,CAACoE,QAAT,CAAkB,GAAlB,CAAA,GACbpE,QAAQ,CAAClG,MAAT,GAAkB,CADL,GAEbkG,QAAQ,CAAClG,MAFb,CAAA;AAGA,EAAA,IAAI6K,QAAQ,GAAG/J,QAAQ,CAACE,MAAT,CAAgB4J,UAAhB,CAAf,CAAA;;AACA,EAAA,IAAIC,QAAQ,IAAIA,QAAQ,KAAK,GAA7B,EAAkC;AAChC;AACA,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;AAED,EAAA,OAAO/J,QAAQ,CAACwC,KAAT,CAAesH,UAAf,KAA8B,GAArC,CAAA;AACD,CAAA;AAUe,SAAAjF,SAAA,CAAU8E,KAAV,EAAsBhH,OAAtB,EAAsC;AACpD,EAAA,IAAIgH,KAAK,KAAK,KAAV,IAAmBA,KAAK,KAAK,IAA7B,IAAqC,OAAOA,KAAP,KAAiB,WAA1D,EAAuE;AACrE,IAAA,MAAM,IAAI7G,KAAJ,CAAUH,OAAV,CAAN,CAAA;AACD,GAAA;AACF,CAAA;AAED;;AAEG;;AACa,SAAA1C,OAAA,CAAQyC,IAAR,EAAmBC,OAAnB,EAAkC;EAChD,IAAI,CAACD,IAAL,EAAW;AACT;IACA,IAAI,OAAOE,OAAP,KAAmB,WAAvB,EAAoCA,OAAO,CAACC,IAAR,CAAaF,OAAb,CAAA,CAAA;;IAEpC,IAAI;AACF;AACA;AACA;AACA;AACA;AACA,MAAA,MAAM,IAAIG,KAAJ,CAAUH,OAAV,CAAN,CANE;AAQH,KARD,CAQE,OAAOI,CAAP,EAAU,EAAE;AACf,GAAA;AACF,CAAA;AAED;;;;AAIG;;SACaiH,YAAYrK,IAAQsK,cAAkB;AAAA,EAAA,IAAlBA,YAAkB,KAAA,KAAA,CAAA,EAAA;AAAlBA,IAAAA,YAAkB,GAAH,GAAG,CAAA;AAAA,GAAA;;EACpD,IAAI;AACFjK,IAAAA,QAAQ,EAAEkK,UADR;AAEF5I,IAAAA,MAAM,GAAG,EAFP;AAGFC,IAAAA,IAAI,GAAG,EAAA;GACL,GAAA,OAAO5B,EAAP,KAAc,QAAd,GAAyBkC,SAAS,CAAClC,EAAD,CAAlC,GAAyCA,EAJ7C,CAAA;AAMA,EAAA,IAAIK,QAAQ,GAAGkK,UAAU,GACrBA,UAAU,CAAChE,UAAX,CAAsB,GAAtB,IACEgE,UADF,GAEEC,eAAe,CAACD,UAAD,EAAaD,YAAb,CAHI,GAIrBA,YAJJ,CAAA;EAMA,OAAO;IACLjK,QADK;AAELsB,IAAAA,MAAM,EAAE8I,eAAe,CAAC9I,MAAD,CAFlB;IAGLC,IAAI,EAAE8I,aAAa,CAAC9I,IAAD,CAAA;GAHrB,CAAA;AAKD,CAAA;;AAED,SAAS4I,eAAT,CAAyBpE,YAAzB,EAA+CkE,YAA/C,EAAmE;AACjE,EAAA,IAAI7C,QAAQ,GAAG6C,YAAY,CAACrJ,OAAb,CAAqB,MAArB,EAA6B,EAA7B,CAAA,CAAiCyG,KAAjC,CAAuC,GAAvC,CAAf,CAAA;AACA,EAAA,IAAIiD,gBAAgB,GAAGvE,YAAY,CAACsB,KAAb,CAAmB,GAAnB,CAAvB,CAAA;AAEAiD,EAAAA,gBAAgB,CAACzE,OAAjB,CAA0B6B,OAAD,IAAY;IACnC,IAAIA,OAAO,KAAK,IAAhB,EAAsB;AACpB;MACA,IAAIN,QAAQ,CAAClI,MAAT,GAAkB,CAAtB,EAAyBkI,QAAQ,CAACmD,GAAT,EAAA,CAAA;AAC1B,KAHD,MAGO,IAAI7C,OAAO,KAAK,GAAhB,EAAqB;MAC1BN,QAAQ,CAAC5G,IAAT,CAAckH,OAAd,CAAA,CAAA;AACD,KAAA;GANH,CAAA,CAAA;AASA,EAAA,OAAON,QAAQ,CAAClI,MAAT,GAAkB,CAAlB,GAAsBkI,QAAQ,CAACxC,IAAT,CAAc,GAAd,CAAtB,GAA2C,GAAlD,CAAA;AACD,CAAA;AAED;;AAEG;;;AACG,SAAU4F,SAAV,CACJC,KADI,EAEJC,cAFI,EAGJC,gBAHI,EAIJC,cAJI,EAIkB;AAAA,EAAA,IAAtBA,cAAsB,KAAA,KAAA,CAAA,EAAA;AAAtBA,IAAAA,cAAsB,GAAL,KAAK,CAAA;AAAA,GAAA;;AAEtB,EAAA,IAAIjL,EAAE,GAAG,OAAO8K,KAAP,KAAiB,QAAjB,GAA4B5I,SAAS,CAAC4I,KAAD,CAArC,GAAA,QAAA,CAAA,EAAA,EAAoDA,KAApD,CAAT,CAAA;EACA,IAAII,WAAW,GAAGJ,KAAK,KAAK,EAAV,IAAgB9K,EAAE,CAACK,QAAH,KAAgB,EAAlD,CAAA;EACA,IAAIkK,UAAU,GAAGW,WAAW,GAAG,GAAH,GAASlL,EAAE,CAACK,QAAxC,CAAA;EAEA,IAAI8K,IAAJ,CANsB;AAStB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,EAAA,IAAIF,cAAc,IAAIV,UAAU,IAAI,IAApC,EAA0C;AACxCY,IAAAA,IAAI,GAAGH,gBAAP,CAAA;AACD,GAFD,MAEO;AACL,IAAA,IAAII,kBAAkB,GAAGL,cAAc,CAACxL,MAAf,GAAwB,CAAjD,CAAA;;AAEA,IAAA,IAAIgL,UAAU,CAAChE,UAAX,CAAsB,IAAtB,CAAJ,EAAiC;MAC/B,IAAI8E,UAAU,GAAGd,UAAU,CAAC7C,KAAX,CAAiB,GAAjB,CAAjB,CAD+B;AAI/B;AACA;;AACA,MAAA,OAAO2D,UAAU,CAAC,CAAD,CAAV,KAAkB,IAAzB,EAA+B;AAC7BA,QAAAA,UAAU,CAACC,KAAX,EAAA,CAAA;AACAF,QAAAA,kBAAkB,IAAI,CAAtB,CAAA;AACD,OAAA;;MAEDpL,EAAE,CAACK,QAAH,GAAcgL,UAAU,CAACpG,IAAX,CAAgB,GAAhB,CAAd,CAAA;AACD,KAfI;AAkBL;;;IACAkG,IAAI,GAAGC,kBAAkB,IAAI,CAAtB,GAA0BL,cAAc,CAACK,kBAAD,CAAxC,GAA+D,GAAtE,CAAA;AACD,GAAA;;EAED,IAAI1H,IAAI,GAAG2G,WAAW,CAACrK,EAAD,EAAKmL,IAAL,CAAtB,CAzCsB;;AA4CtB,EAAA,IAAII,wBAAwB,GAC1BhB,UAAU,IAAIA,UAAU,KAAK,GAA7B,IAAoCA,UAAU,CAACV,QAAX,CAAoB,GAApB,CADtC,CA5CsB;;AA+CtB,EAAA,IAAI2B,uBAAuB,GACzB,CAACN,WAAW,IAAIX,UAAU,KAAK,GAA/B,KAAuCS,gBAAgB,CAACnB,QAAjB,CAA0B,GAA1B,CADzC,CAAA;;AAEA,EAAA,IACE,CAACnG,IAAI,CAACrD,QAAL,CAAcwJ,QAAd,CAAuB,GAAvB,CAAD,KACC0B,wBAAwB,IAAIC,uBAD7B,CADF,EAGE;IACA9H,IAAI,CAACrD,QAAL,IAAiB,GAAjB,CAAA;AACD,GAAA;;AAED,EAAA,OAAOqD,IAAP,CAAA;AACD,CAAA;AAED;;AAEG;;AACG,SAAU+H,aAAV,CAAwBzL,EAAxB,EAA8B;AAClC;EACA,OAAOA,EAAE,KAAK,EAAP,IAAcA,EAAW,CAACK,QAAZ,KAAyB,EAAvC,GACH,GADG,GAEH,OAAOL,EAAP,KAAc,QAAd,GACAkC,SAAS,CAAClC,EAAD,CAAT,CAAcK,QADd,GAEAL,EAAE,CAACK,QAJP,CAAA;AAKD,CAAA;AAED;;AAEG;;MACUmG,SAAS,GAAIkF,KAAD,IACvBA,KAAK,CAACzG,IAAN,CAAW,GAAX,EAAgBhE,OAAhB,CAAwB,QAAxB,EAAkC,GAAlC,EADK;AAGP;;AAEG;;MACU4H,iBAAiB,GAAIxI,QAAD,IAC/BA,QAAQ,CAACY,OAAT,CAAiB,MAAjB,EAAyB,EAAzB,CAA6BA,CAAAA,OAA7B,CAAqC,MAArC,EAA6C,GAA7C,EADK;AAGP;;AAEG;;AACI,MAAMwJ,eAAe,GAAI9I,MAAD,IAC7B,CAACA,MAAD,IAAWA,MAAM,KAAK,GAAtB,GACI,EADJ,GAEIA,MAAM,CAAC4E,UAAP,CAAkB,GAAlB,CACA5E,GAAAA,MADA,GAEA,GAAA,GAAMA,MALL,CAAA;AAOP;;AAEG;;AACI,MAAM+I,aAAa,GAAI9I,IAAD,IAC3B,CAACA,IAAD,IAASA,IAAI,KAAK,GAAlB,GAAwB,EAAxB,GAA6BA,IAAI,CAAC2E,UAAL,CAAgB,GAAhB,CAAuB3E,GAAAA,IAAvB,GAA8B,GAAA,GAAMA,IAD5D,CAAA;AAQP;;;AAGG;;AACI,MAAM+J,IAAI,GAAiB,SAArBA,IAAqB,CAACC,IAAD,EAAOC,IAAP,EAAoB;AAAA,EAAA,IAAbA,IAAa,KAAA,KAAA,CAAA,EAAA;AAAbA,IAAAA,IAAa,GAAN,EAAM,CAAA;AAAA,GAAA;;AACpD,EAAA,IAAIC,YAAY,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2B;AAAEE,IAAAA,MAAM,EAAEF,IAAAA;AAAV,GAA3B,GAA8CA,IAAjE,CAAA;EAEA,IAAIG,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd,CAAA;;AACA,EAAA,IAAI,CAACA,OAAO,CAAC7G,GAAR,CAAY,cAAZ,CAAL,EAAkC;AAChC6G,IAAAA,OAAO,CAACE,GAAR,CAAY,cAAZ,EAA4B,iCAA5B,CAAA,CAAA;AACD,GAAA;;EAED,OAAO,IAAIC,QAAJ,CAAa3L,IAAI,CAACC,SAAL,CAAemL,IAAf,CAAb,EAAA,QAAA,CAAA,EAAA,EACFE,YADE,EAAA;AAELE,IAAAA,OAAAA;GAFF,CAAA,CAAA,CAAA;AAID,EAZM;AAoBD,MAAOI,oBAAP,SAAoCjJ,KAApC,CAAyC,EAAA;MAElCkJ,aAAY;EAQvBC,WAAA,CAAYV,IAAZ,EAAyC;AAPjC,IAAA,IAAA,CAAAW,WAAA,GAAoC,IAAI1H,GAAJ,EAApC,CAAA;IAIA,IAAU2H,CAAAA,UAAV,GAA0CnN,SAA1C,CAAA;AAIN6F,IAAAA,SAAS,CACP0G,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAAxB,IAAoC,CAACa,KAAK,CAACC,OAAN,CAAcd,IAAd,CAD9B,EAEP,oCAFO,CAAT,CADuC;AAOvC;;AACA,IAAA,IAAIe,MAAJ,CAAA;AACA,IAAA,IAAA,CAAKC,YAAL,GAAoB,IAAIC,OAAJ,CAAY,CAAC9D,CAAD,EAAI+D,CAAJ,KAAWH,MAAM,GAAGG,CAAhC,CAApB,CAAA;AACA,IAAA,IAAA,CAAKC,UAAL,GAAkB,IAAIC,eAAJ,EAAlB,CAAA;;IACA,IAAIC,OAAO,GAAG,MACZN,MAAM,CAAC,IAAIP,oBAAJ,CAAyB,uBAAzB,CAAD,CADR,CAAA;;AAEA,IAAA,IAAA,CAAKc,mBAAL,GAA2B,MACzB,IAAA,CAAKH,UAAL,CAAgBI,MAAhB,CAAuB5I,mBAAvB,CAA2C,OAA3C,EAAoD0I,OAApD,CADF,CAAA;;IAEA,IAAKF,CAAAA,UAAL,CAAgBI,MAAhB,CAAuB7I,gBAAvB,CAAwC,OAAxC,EAAiD2I,OAAjD,CAAA,CAAA;IAEA,IAAKrB,CAAAA,IAAL,GAAYlD,MAAM,CAAC1J,OAAP,CAAe4M,IAAf,CAAqB9D,CAAAA,MAArB,CACV,CAACsF,GAAD,EAAA,IAAA,KAAA;AAAA,MAAA,IAAM,CAAClN,GAAD,EAAM8J,KAAN,CAAN,GAAA,IAAA,CAAA;AAAA,MAAA,OACEtB,MAAM,CAACtE,MAAP,CAAcgJ,GAAd,EAAmB;AACjB,QAAA,CAAClN,GAAD,GAAO,IAAA,CAAKmN,YAAL,CAAkBnN,GAAlB,EAAuB8J,KAAvB,CAAA;AADU,OAAnB,CADF,CAAA;KADU,EAKV,EALU,CAAZ,CAAA;AAOD,GAAA;;AAEOqD,EAAAA,YAAY,CAClBnN,GADkB,EAElB8J,KAFkB,EAEe;AAEjC,IAAA,IAAI,EAAEA,KAAK,YAAY6C,OAAnB,CAAJ,EAAiC;AAC/B,MAAA,OAAO7C,KAAP,CAAA;AACD,KAAA;;AAED,IAAA,IAAA,CAAKuC,WAAL,CAAiBnH,GAAjB,CAAqBlF,GAArB,EANiC;AASjC;;AACA,IAAA,IAAIoN,OAAO,GAAmBT,OAAO,CAACU,IAAR,CAAa,CAACvD,KAAD,EAAQ,KAAK4C,YAAb,CAAb,EAAyCY,IAAzC,CAC3B5B,IAAD,IAAU,IAAA,CAAK6B,QAAL,CAAcH,OAAd,EAAuBpN,GAAvB,EAA4B,IAA5B,EAAkC0L,IAAlC,CADkB,EAE3BzH,KAAD,IAAW,IAAA,CAAKsJ,QAAL,CAAcH,OAAd,EAAuBpN,GAAvB,EAA4BiE,KAA5B,CAFiB,CAA9B,CAViC;AAgBjC;;AACAmJ,IAAAA,OAAO,CAACI,KAAR,CAAc,MAAO,EAArB,CAAA,CAAA;AAEAhF,IAAAA,MAAM,CAACiF,cAAP,CAAsBL,OAAtB,EAA+B,UAA/B,EAA2C;AAAEM,MAAAA,GAAG,EAAE,MAAM,IAAA;KAAxD,CAAA,CAAA;AACA,IAAA,OAAON,OAAP,CAAA;AACD,GAAA;;EAEOG,QAAQ,CACdH,OADc,EAEdpN,GAFc,EAGdiE,KAHc,EAIdyH,IAJc,EAIA;AAAA,IAAA,IAAA,iBAAA,CAAA;;IAEd,IACE,IAAA,CAAKmB,UAAL,CAAgBI,MAAhB,CAAuBU,OAAvB,IACA1J,KAAK,YAAYiI,oBAFnB,EAGE;AACA,MAAA,IAAA,CAAKc,mBAAL,EAAA,CAAA;AACAxE,MAAAA,MAAM,CAACiF,cAAP,CAAsBL,OAAtB,EAA+B,QAA/B,EAAyC;AAAEM,QAAAA,GAAG,EAAE,MAAMzJ,KAAAA;OAAtD,CAAA,CAAA;AACA,MAAA,OAAO0I,OAAO,CAACF,MAAR,CAAexI,KAAf,CAAP,CAAA;AACD,KAAA;;AAED,IAAA,IAAA,CAAKoI,WAAL,CAAiBuB,MAAjB,CAAwB5N,GAAxB,CAAA,CAAA;;IAEA,IAAI,IAAA,CAAK6N,IAAT,EAAe;AACb;AACA,MAAA,IAAA,CAAKb,mBAAL,EAAA,CAAA;AACD,KAAA;;AAED,IAAA,IAAI/I,KAAJ,EAAW;AAAA,MAAA,IAAA,gBAAA,CAAA;;AACTuE,MAAAA,MAAM,CAACiF,cAAP,CAAsBL,OAAtB,EAA+B,QAA/B,EAAyC;AAAEM,QAAAA,GAAG,EAAE,MAAMzJ,KAAAA;OAAtD,CAAA,CAAA;MACA,CAAKqI,gBAAAA,GAAAA,IAAAA,CAAAA,UAAL,iDAAkB,KAAlB,CAAA,CAAA;AACA,MAAA,OAAOK,OAAO,CAACF,MAAR,CAAexI,KAAf,CAAP,CAAA;AACD,KAAA;;AAEDuE,IAAAA,MAAM,CAACiF,cAAP,CAAsBL,OAAtB,EAA+B,OAA/B,EAAwC;AAAEM,MAAAA,GAAG,EAAE,MAAMhC,IAAAA;KAArD,CAAA,CAAA;IACA,CAAKY,iBAAAA,GAAAA,IAAAA,CAAAA,UAAL,kDAAkB,KAAlB,CAAA,CAAA;AACA,IAAA,OAAOZ,IAAP,CAAA;AACD,GAAA;;EAEDoC,SAAS,CAAC1M,EAAD,EAA+B;IACtC,IAAKkL,CAAAA,UAAL,GAAkBlL,EAAlB,CAAA;AACD,GAAA;;AAED2M,EAAAA,MAAM,GAAA;AAAA,IAAA,IAAA,iBAAA,CAAA;;IACJ,IAAKlB,CAAAA,UAAL,CAAgBmB,KAAhB,EAAA,CAAA;AACA,IAAA,IAAA,CAAK3B,WAAL,CAAiBrG,OAAjB,CAAyB,CAACiI,CAAD,EAAIC,CAAJ,KAAU,KAAK7B,WAAL,CAAiBuB,MAAjB,CAAwBM,CAAxB,CAAnC,CAAA,CAAA;IACA,CAAK5B,iBAAAA,GAAAA,IAAAA,CAAAA,UAAL,kDAAkB,IAAlB,CAAA,CAAA;AACD,GAAA;;EAEgB,MAAX6B,WAAW,CAAClB,MAAD,EAAoB;IACnC,IAAIU,OAAO,GAAG,KAAd,CAAA;;IACA,IAAI,CAAC,IAAKE,CAAAA,IAAV,EAAgB;AACd,MAAA,IAAId,OAAO,GAAG,MAAM,IAAA,CAAKgB,MAAL,EAApB,CAAA;;AACAd,MAAAA,MAAM,CAAC7I,gBAAP,CAAwB,OAAxB,EAAiC2I,OAAjC,CAAA,CAAA;AACAY,MAAAA,OAAO,GAAG,MAAM,IAAIhB,OAAJ,CAAayB,OAAD,IAAY;QACtC,IAAKN,CAAAA,SAAL,CAAgBH,OAAD,IAAY;AACzBV,UAAAA,MAAM,CAAC5I,mBAAP,CAA2B,OAA3B,EAAoC0I,OAApC,CAAA,CAAA;;AACA,UAAA,IAAIY,OAAO,IAAI,IAAKE,CAAAA,IAApB,EAA0B;YACxBO,OAAO,CAACT,OAAD,CAAP,CAAA;AACD,WAAA;SAJH,CAAA,CAAA;AAMD,OAPe,CAAhB,CAAA;AAQD,KAAA;;AACD,IAAA,OAAOA,OAAP,CAAA;AACD,GAAA;;AAEO,EAAA,IAAJE,IAAI,GAAA;AACN,IAAA,OAAO,IAAKxB,CAAAA,WAAL,CAAiBgC,IAAjB,KAA0B,CAAjC,CAAA;AACD,GAAA;;AAEgB,EAAA,IAAbC,aAAa,GAAA;IACftJ,SAAS,CACP,IAAK0G,CAAAA,IAAL,KAAc,IAAd,IAAsB,IAAKmC,CAAAA,IADpB,EAEP,2DAFO,CAAT,CAAA;IAKA,OAAOrF,MAAM,CAAC1J,OAAP,CAAe,IAAA,CAAK4M,IAApB,CAA0B9D,CAAAA,MAA1B,CACL,CAACsF,GAAD,EAAA,KAAA,KAAA;AAAA,MAAA,IAAM,CAAClN,GAAD,EAAM8J,KAAN,CAAN,GAAA,KAAA,CAAA;AAAA,MAAA,OACEtB,MAAM,CAACtE,MAAP,CAAcgJ,GAAd,EAAmB;AACjB,QAAA,CAAClN,GAAD,GAAOuO,oBAAoB,CAACzE,KAAD,CAAA;AADV,OAAnB,CADF,CAAA;KADK,EAKL,EALK,CAAP,CAAA;AAOD,GAAA;;AAxIsB,CAAA;;AA2IzB,SAAS0E,gBAAT,CAA0B1E,KAA1B,EAAoC;EAClC,OACEA,KAAK,YAAY6C,OAAjB,IAA6B7C,KAAwB,CAAC2E,QAAzB,KAAsC,IADrE,CAAA;AAGD,CAAA;;AAED,SAASF,oBAAT,CAA8BzE,KAA9B,EAAwC;AACtC,EAAA,IAAI,CAAC0E,gBAAgB,CAAC1E,KAAD,CAArB,EAA8B;AAC5B,IAAA,OAAOA,KAAP,CAAA;AACD,GAAA;;EAED,IAAIA,KAAK,CAAC4E,MAAV,EAAkB;IAChB,MAAM5E,KAAK,CAAC4E,MAAZ,CAAA;AACD,GAAA;;EACD,OAAO5E,KAAK,CAAC6E,KAAb,CAAA;AACD,CAAA;;AAEK,SAAUC,KAAV,CAAgBlD,IAAhB,EAA6C;AACjD,EAAA,OAAO,IAAIS,YAAJ,CAAiBT,IAAjB,CAAP,CAAA;AACD,CAAA;AAOD;;;AAGG;;AACI,MAAMmD,QAAQ,GAAqB,SAA7BA,QAA6B,CAACrM,GAAD,EAAMmJ,IAAN,EAAoB;AAAA,EAAA,IAAdA,IAAc,KAAA,KAAA,CAAA,EAAA;AAAdA,IAAAA,IAAc,GAAP,GAAO,CAAA;AAAA,GAAA;;EAC5D,IAAIC,YAAY,GAAGD,IAAnB,CAAA;;AACA,EAAA,IAAI,OAAOC,YAAP,KAAwB,QAA5B,EAAsC;AACpCA,IAAAA,YAAY,GAAG;AAAEC,MAAAA,MAAM,EAAED,YAAAA;KAAzB,CAAA;GADF,MAEO,IAAI,OAAOA,YAAY,CAACC,MAApB,KAA+B,WAAnC,EAAgD;IACrDD,YAAY,CAACC,MAAb,GAAsB,GAAtB,CAAA;AACD,GAAA;;EAED,IAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAYH,YAAY,CAACE,OAAzB,CAAd,CAAA;AACAA,EAAAA,OAAO,CAACE,GAAR,CAAY,UAAZ,EAAwBxJ,GAAxB,CAAA,CAAA;AAEA,EAAA,OAAO,IAAIyJ,QAAJ,CAAa,IAAb,eACFL,YADE,EAAA;AAELE,IAAAA,OAAAA;GAFF,CAAA,CAAA,CAAA;AAID,EAfM;AAiBP;;;AAGG;;MACUgD,cAAa;AAKxB1C,EAAAA,WAAA,CAAYP,MAAZ,EAA4BkD,UAA5B,EAA4DrD,IAA5D,EAAqE;IACnE,IAAKG,CAAAA,MAAL,GAAcA,MAAd,CAAA;AACA,IAAA,IAAA,CAAKkD,UAAL,GAAkBA,UAAU,IAAI,EAAhC,CAAA;IACA,IAAKrD,CAAAA,IAAL,GAAYA,IAAZ,CAAA;AACD,GAAA;;AATuB,CAAA;AAY1B;;;AAGG;;AACG,SAAUsD,oBAAV,CAA+B9L,CAA/B,EAAqC;EACzC,OAAOA,CAAC,YAAY4L,aAApB,CAAA;AACD;;AC3nBM,MAAMG,eAAe,GAA6B;AACvDlP,EAAAA,KAAK,EAAE,MADgD;AAEvDE,EAAAA,QAAQ,EAAEd,SAF6C;AAGvD+P,EAAAA,UAAU,EAAE/P,SAH2C;AAIvDgQ,EAAAA,UAAU,EAAEhQ,SAJ2C;AAKvDiQ,EAAAA,WAAW,EAAEjQ,SAL0C;AAMvDkQ,EAAAA,QAAQ,EAAElQ,SAAAA;AAN6C,EAAlD;AASA,MAAMmQ,YAAY,GAA0B;AACjDvP,EAAAA,KAAK,EAAE,MAD0C;AAEjD2L,EAAAA,IAAI,EAAEvM,SAF2C;AAGjD+P,EAAAA,UAAU,EAAE/P,SAHqC;AAIjDgQ,EAAAA,UAAU,EAAEhQ,SAJqC;AAKjDiQ,EAAAA,WAAW,EAAEjQ,SALoC;AAMjDkQ,EAAAA,QAAQ,EAAElQ,SAAAA;AANuC;AAUnD;AACA;AACA;;AAEA;;AAEG;;AACG,SAAUoQ,YAAV,CAAuB5D,IAAvB,EAAuC;AAAA,EAAA,IAAA,mBAAA,EAAA,oBAAA,EAAA,oBAAA,CAAA;;EAC3C3G,SAAS,CACP2G,IAAI,CAACnH,MAAL,CAAYnF,MAAZ,GAAqB,CADd,EAEP,2DAFO,CAAT,CAAA;EAKA,IAAImQ,UAAU,GAAGjL,yBAAyB,CAACoH,IAAI,CAACnH,MAAN,CAA1C,CAN2C;;AAQ3C,EAAA,IAAIiL,eAAe,GAAwB,IAA3C,CAR2C;;AAU3C,EAAA,IAAIC,WAAW,GAAG,IAAI/K,GAAJ,EAAlB,CAV2C;;AAY3C,EAAA,IAAIgL,oBAAoB,GAAkC,IAA1D,CAZ2C;;AAc3C,EAAA,IAAIC,uBAAuB,GAA2C,IAAtE,CAd2C;;AAgB3C,EAAA,IAAIC,iBAAiB,GAAqC,IAA1D,CAhB2C;AAkB3C;AACA;AACA;;EACA,IAAIC,qBAAqB,GAAG,KAA5B,CAAA;AAEA,EAAA,IAAIC,cAAc,GAAG1K,WAAW,CAC9BmK,UAD8B,EAE9B7D,IAAI,CAACnL,OAAL,CAAaP,QAFiB,EAG9B0L,IAAI,CAACpG,QAHyB,CAAhC,CAAA;EAKA,IAAIyK,aAAa,GAAqB,IAAtC,CAAA;;EAEA,IAAID,cAAc,IAAI,IAAtB,EAA4B;AAC1B;AACA;IACA,IAAI;MAAEnK,OAAF;MAAWhB,KAAX;AAAkBX,MAAAA,KAAAA;KAAUgM,GAAAA,kBAAkB,CAACT,UAAD,CAAlD,CAAA;AACAO,IAAAA,cAAc,GAAGnK,OAAjB,CAAA;AACAoK,IAAAA,aAAa,GAAG;MAAE,CAACpL,KAAK,CAACE,EAAP,GAAYb,KAAAA;KAA9B,CAAA;AACD,GAAA;;EAED,IAAIiM,WAAW,GACb,CAACH,cAAc,CAACrI,IAAf,CAAqByI,CAAD,IAAOA,CAAC,CAACvL,KAAF,CAAQwL,MAAnC,CAAD,IAA+CzE,IAAI,CAAC0E,aAAL,IAAsB,IADvE,CAAA;AAGA,EAAA,IAAIC,MAAJ,CAAA;AACA,EAAA,IAAIvQ,KAAK,GAAgB;AACvBwQ,IAAAA,aAAa,EAAE5E,IAAI,CAACnL,OAAL,CAAalB,MADL;AAEvBW,IAAAA,QAAQ,EAAE0L,IAAI,CAACnL,OAAL,CAAaP,QAFA;AAGvB2F,IAAAA,OAAO,EAAEmK,cAHc;IAIvBG,WAJuB;AAKvBM,IAAAA,UAAU,EAAEvB,eALW;AAMvBwB,IAAAA,qBAAqB,EAAE,IANA;AAOvBC,IAAAA,kBAAkB,EAAE,KAPG;AAQvBC,IAAAA,YAAY,EAAE,MARS;IASvBC,UAAU,EAAE,wBAAAjF,IAAI,CAAC0E,aAAL,KAAoBO,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,mBAAAA,CAAAA,UAApB,KAAkC,EATvB;IAUvBC,UAAU,EAAE,yBAAAlF,IAAI,CAAC0E,aAAL,KAAoBQ,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oBAAAA,CAAAA,UAApB,KAAkC,IAVvB;IAWvBC,MAAM,EAAE,yBAAAnF,IAAI,CAAC0E,aAAL,KAAoBS,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oBAAAA,CAAAA,MAApB,KAA8Bd,aAXf;IAYvBe,QAAQ,EAAE,IAAIC,GAAJ,EAAA;AAZa,GAAzB,CA1C2C;AA0D3C;;AACA,EAAA,IAAIC,aAAa,GAAkBC,MAAa,CAAC3R,GAAjD,CA3D2C;AA6D3C;;AACA,EAAA,IAAI4R,yBAAyB,GAAG,KAAhC,CA9D2C;;EAgE3C,IAAIC,2BAAJ,CAhE2C;AAkE3C;;AACA,EAAA,IAAIC,2BAA2B,GAAG,KAAlC,CAnE2C;AAqE3C;AACA;AACA;;AACA,EAAA,IAAIC,sBAAsB,GAAG,KAA7B,CAxE2C;AA0E3C;;AACA,EAAA,IAAIC,uBAAuB,GAAa,EAAxC,CA3E2C;AA6E3C;;AACA,EAAA,IAAIC,qBAAqB,GAAa,EAAtC,CA9E2C;;AAgF3C,EAAA,IAAIC,gBAAgB,GAAG,IAAIT,GAAJ,EAAvB,CAhF2C;;AAkF3C,EAAA,IAAIU,kBAAkB,GAAG,CAAzB,CAlF2C;AAoF3C;AACA;;AACA,EAAA,IAAIC,uBAAuB,GAAG,CAAC,CAA/B,CAtF2C;;AAwF3C,EAAA,IAAIC,cAAc,GAAG,IAAIZ,GAAJ,EAArB,CAxF2C;;AA0F3C,EAAA,IAAIa,gBAAgB,GAAG,IAAIlN,GAAJ,EAAvB,CA1F2C;;AA4F3C,EAAA,IAAImN,gBAAgB,GAAG,IAAId,GAAJ,EAAvB,CA5F2C;AA8F3C;AACA;AACA;;AACA,EAAA,IAAIe,eAAe,GAAG,IAAIf,GAAJ,EAAtB,CAjG2C;AAoG3C;AACA;;AACA,EAAA,SAASgB,UAAT,GAAmB;AACjB;AACA;AACAvC,IAAAA,eAAe,GAAG9D,IAAI,CAACnL,OAAL,CAAaW,MAAb,CAChB,IAAA,IAAA;MAAA,IAAC;AAAE7B,QAAAA,MAAM,EAAEiR,aAAV;AAAyBtQ,QAAAA,QAAAA;OAA1B,GAAA,IAAA,CAAA;AAAA,MAAA,OACEgS,eAAe,CAAC1B,aAAD,EAAgBtQ,QAAhB,CADjB,CAAA;KADgB,CAAlB,CAHiB;;AASjB,IAAA,IAAI,CAACF,KAAK,CAACmQ,WAAX,EAAwB;MACtB+B,eAAe,CAACf,MAAa,CAAC3R,GAAf,EAAoBQ,KAAK,CAACE,QAA1B,CAAf,CAAA;AACD,KAAA;;AAED,IAAA,OAAOqQ,MAAP,CAAA;AACD,GApH0C;;;AAuH3C,EAAA,SAAS4B,OAAT,GAAgB;AAAA,IAAA,IAAA,qBAAA,CAAA;;AACd,IAAA,IAAIzC,eAAJ,EAAqB;MACnBA,eAAe,EAAA,CAAA;AAChB,KAAA;;AACDC,IAAAA,WAAW,CAACyC,KAAZ,EAAA,CAAA;IACA,CAAAf,qBAAAA,GAAAA,2BAA2B,KAA3B,IAAA,GAAA,KAAA,CAAA,GAAA,qBAAA,CAA6BpD,KAA7B,EAAA,CAAA;AACAjO,IAAAA,KAAK,CAACgR,QAAN,CAAe/K,OAAf,CAAuB,CAAC6C,CAAD,EAAI7I,GAAJ,KAAYoS,aAAa,CAACpS,GAAD,CAAhD,CAAA,CAAA;AACD,GA9H0C;;;EAiI3C,SAAS8N,SAAT,CAAmB1M,EAAnB,EAAuC;IACrCsO,WAAW,CAACxK,GAAZ,CAAgB9D,EAAhB,CAAA,CAAA;AACA,IAAA,OAAO,MAAMsO,WAAW,CAAC9B,MAAZ,CAAmBxM,EAAnB,CAAb,CAAA;AACD,GApI0C;;;EAuI3C,SAASiR,WAAT,CAAqBC,QAArB,EAAmD;AACjDvS,IAAAA,KAAK,GACAA,QAAAA,CAAAA,EAAAA,EAAAA,KADA,EAEAuS,QAFA,CAAL,CAAA;IAIA5C,WAAW,CAAC1J,OAAZ,CAAqBsG,UAAD,IAAgBA,UAAU,CAACvM,KAAD,CAA9C,CAAA,CAAA;AACD,GA7I0C;AAgJ3C;AACA;AACA;AACA;;;AACA,EAAA,SAASwS,kBAAT,CACEtS,QADF,EAEEqS,QAFF,EAE4E;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,IAAIE,cAAc,GAChBzS,KAAK,CAAC8Q,UAAN,IAAoB,IAApB,IACA9Q,KAAK,CAACyQ,UAAN,CAAiBtB,UAAjB,IAA+B,IAD/B,IAEAnP,KAAK,CAACyQ,UAAN,CAAiBzQ,KAAjB,KAA2B,SAH7B,CAV0E;;AAgB1E,IAAA,IAAI0S,aAAa,GAAGH,QAAQ,CAAC1B,UAAT,GAChB;AACEA,MAAAA,UAAU,EAAE8B,eAAe,CACzB3S,KAAK,CAAC6Q,UADmB,EAEzB0B,QAAQ,CAAC1B,UAFgB,EAGzB0B,QAAQ,CAAC1M,OAAT,IAAoB,EAHK,CAAA;AAD7B,KADgB,GAQhB,EARJ,CAAA;AAUAyM,IAAAA,WAAW,CAILG,QAAAA,CAAAA,EAAAA,EAAAA,cAAc,GAAG,EAAH,GAAQ;AAAE3B,MAAAA,UAAU,EAAE,IAAA;KAJ/B,EAKNyB,QALM,EAMNG,aANM,EAAA;AAOTlC,MAAAA,aAAa,EAAEU,aAPN;MAQThR,QARS;AASTiQ,MAAAA,WAAW,EAAE,IATJ;AAUTM,MAAAA,UAAU,EAAEvB,eAVH;AAWT0B,MAAAA,YAAY,EAAE,MAXL;AAYT;MACAF,qBAAqB,EAAE1Q,KAAK,CAACyQ,UAAN,CAAiBnB,QAAjB,GACnB,KADmB,GAEnBsD,sBAAsB,CAAC1S,QAAD,EAAWqS,QAAQ,CAAC1M,OAAT,IAAoB7F,KAAK,CAAC6F,OAArC,CAfjB;AAgBT8K,MAAAA,kBAAkB,EAAES,yBAAAA;KAhBtB,CAAA,CAAA,CAAA;;IAmBA,IAAIE,2BAAJ,EAAiC,CAAjC,MAEO,IAAIJ,aAAa,KAAKC,MAAa,CAAC3R,GAApC,EAAyC,CAAzC,MAEA,IAAI0R,aAAa,KAAKC,MAAa,CAACtQ,IAApC,EAA0C;MAC/C+K,IAAI,CAACnL,OAAL,CAAaG,IAAb,CAAkBV,QAAlB,EAA4BA,QAAQ,CAACF,KAArC,CAAA,CAAA;AACD,KAFM,MAEA,IAAIkR,aAAa,KAAKC,MAAa,CAAClQ,OAApC,EAA6C;MAClD2K,IAAI,CAACnL,OAAL,CAAaO,OAAb,CAAqBd,QAArB,EAA+BA,QAAQ,CAACF,KAAxC,CAAA,CAAA;AACD,KArDyE;;;IAwD1EkR,aAAa,GAAGC,MAAa,CAAC3R,GAA9B,CAAA;AACA4R,IAAAA,yBAAyB,GAAG,KAA5B,CAAA;AACAE,IAAAA,2BAA2B,GAAG,KAA9B,CAAA;AACAC,IAAAA,sBAAsB,GAAG,KAAzB,CAAA;AACAC,IAAAA,uBAAuB,GAAG,EAA1B,CAAA;AACAC,IAAAA,qBAAqB,GAAG,EAAxB,CAAA;AACD,GApN0C;AAuN3C;;;AACA,EAAA,eAAeoB,QAAf,CACE9S,EADF,EAEE+S,IAFF,EAE8B;AAE5B,IAAA,IAAI,OAAO/S,EAAP,KAAc,QAAlB,EAA4B;AAC1B6L,MAAAA,IAAI,CAACnL,OAAL,CAAaS,EAAb,CAAgBnB,EAAhB,CAAA,CAAA;AACA,MAAA,OAAA;AACD,KAAA;;IAED,IAAI;MAAE0D,IAAF;MAAQsP,UAAR;AAAoB7O,MAAAA,KAAAA;AAApB,KAAA,GAA8B8O,wBAAwB,CAACjT,EAAD,EAAK+S,IAAL,CAA1D,CAAA;AAEA,IAAA,IAAI5S,QAAQ,GAAGC,cAAc,CAACH,KAAK,CAACE,QAAP,EAAiBuD,IAAjB,EAAuBqP,IAAvB,IAAA,IAAA,GAAA,KAAA,CAAA,GAAuBA,IAAI,CAAE9S,KAA7B,CAA7B,CAAA;IACA,IAAIwQ,aAAa,GACf,CAAAsC,IAAI,QAAJ,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAE9R,OAAN,MAAkB,IAAlB,IAA0B+R,UAAU,IAAI,IAAxC,GACI5B,MAAa,CAAClQ,OADlB,GAEIkQ,MAAa,CAACtQ,IAHpB,CAAA;AAIA,IAAA,IAAI8P,kBAAkB,GACpBmC,IAAI,IAAI,oBAAwBA,IAAAA,IAAhC,GACIA,IAAI,CAACnC,kBAAL,KAA4B,IADhC,GAEIvR,SAHN,CAAA;AAKA,IAAA,OAAO,MAAM8S,eAAe,CAAC1B,aAAD,EAAgBtQ,QAAhB,EAA0B;MACpD6S,UADoD;AAEpD;AACA;AACAE,MAAAA,YAAY,EAAE/O,KAJsC;MAKpDyM,kBALoD;AAMpD3P,MAAAA,OAAO,EAAE8R,IAAF,IAAEA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAE9R,OAAAA;AANqC,KAA1B,CAA5B,CAAA;AAQD,GArP0C;AAwP3C;AACA;;;AACA,EAAA,SAASkS,UAAT,GAAmB;IACjBC,oBAAoB,EAAA,CAAA;AACpBb,IAAAA,WAAW,CAAC;AAAE1B,MAAAA,YAAY,EAAE,SAAA;KAAjB,CAAX,CAFiB;AAKjB;;AACA,IAAA,IAAI5Q,KAAK,CAACyQ,UAAN,CAAiBzQ,KAAjB,KAA2B,YAA/B,EAA6C;AAC3C,MAAA,OAAA;AACD,KARgB;AAWjB;AACA;;;AACA,IAAA,IAAIA,KAAK,CAACyQ,UAAN,CAAiBzQ,KAAjB,KAA2B,MAA/B,EAAuC;MACrCkS,eAAe,CAAClS,KAAK,CAACwQ,aAAP,EAAsBxQ,KAAK,CAACE,QAA5B,EAAsC;AACnDkT,QAAAA,8BAA8B,EAAE,IAAA;AADmB,OAAtC,CAAf,CAAA;AAGA,MAAA,OAAA;AACD,KAlBgB;AAqBjB;AACA;;;AACAlB,IAAAA,eAAe,CACbhB,aAAa,IAAIlR,KAAK,CAACwQ,aADV,EAEbxQ,KAAK,CAACyQ,UAAN,CAAiBvQ,QAFJ,EAGb;MAAEmT,kBAAkB,EAAErT,KAAK,CAACyQ,UAAAA;AAA5B,KAHa,CAAf,CAAA;AAKD,GAtR0C;AAyR3C;AACA;;;AACA,EAAA,eAAeyB,eAAf,CACE1B,aADF,EAEEtQ,QAFF,EAGE4S,IAHF,EAUG;AAAA,IAAA,IAAA,sBAAA,CAAA;;AAED;AACA;AACA;IACA,CAAAzB,sBAAAA,GAAAA,2BAA2B,KAA3B,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAA6BpD,KAA7B,EAAA,CAAA;AACAoD,IAAAA,2BAA2B,GAAG,IAA9B,CAAA;AACAH,IAAAA,aAAa,GAAGV,aAAhB,CAAA;IACAc,2BAA2B,GAAG,CAAAwB,IAAI,IAAJ,IAAA,GAAA,KAAA,CAAA,GAAAA,IAAI,CAAEM,8BAAN,MAAyC,IAAvE,CARC;AAWD;;IACAE,kBAAkB,CAACtT,KAAK,CAACE,QAAP,EAAiBF,KAAK,CAAC6F,OAAvB,CAAlB,CAAA;IACAuL,yBAAyB,GAAG,CAAA0B,IAAI,IAAA,IAAJ,YAAAA,IAAI,CAAEnC,kBAAN,MAA6B,IAAzD,CAAA;AAEA,IAAA,IAAI4C,iBAAiB,GAAGT,IAAH,IAAGA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAEO,kBAA9B,CAAA;AACA,IAAA,IAAIxN,OAAO,GAAGP,WAAW,CAACmK,UAAD,EAAavP,QAAb,EAAuB0L,IAAI,CAACpG,QAA5B,CAAzB,CAhBC;;IAmBD,IAAI,CAACK,OAAL,EAAc;MACZ,IAAI;AACFA,QAAAA,OAAO,EAAE2N,eADP;QAEF3O,KAFE;AAGFX,QAAAA,KAAAA;AAHE,OAAA,GAIAgM,kBAAkB,CAACT,UAAD,CAJtB,CADY;;MAOZgE,qBAAqB,EAAA,CAAA;MACrBjB,kBAAkB,CAACtS,QAAD,EAAW;AAC3B2F,QAAAA,OAAO,EAAE2N,eADkB;AAE3B3C,QAAAA,UAAU,EAAE,EAFe;AAG3BE,QAAAA,MAAM,EAAE;UACN,CAAClM,KAAK,CAACE,EAAP,GAAYb,KAAAA;AADN,SAAA;AAHmB,OAAX,CAAlB,CAAA;AAOA,MAAA,OAAA;AACD,KAnCA;;;IAsCD,IAAIwP,gBAAgB,CAAC1T,KAAK,CAACE,QAAP,EAAiBA,QAAjB,CAApB,EAAgD;MAC9CsS,kBAAkB,CAACtS,QAAD,EAAW;AAAE2F,QAAAA,OAAAA;AAAF,OAAX,CAAlB,CAAA;AACA,MAAA,OAAA;AACD,KAzCA;;;IA4CDwL,2BAA2B,GAAG,IAAItE,eAAJ,EAA9B,CAAA;AACA,IAAA,IAAI4G,OAAO,GAAGC,aAAa,CACzB1T,QADyB,EAEzBmR,2BAA2B,CAACnE,MAFH,EAGzB4F,IAHyB,IAAA,IAAA,GAAA,KAAA,CAAA,GAGzBA,IAAI,CAAEC,UAHmB,CAA3B,CAAA;AAKA,IAAA,IAAIc,iBAAJ,CAAA;AACA,IAAA,IAAIZ,YAAJ,CAAA;;AAEA,IAAA,IAAIH,IAAJ,IAAA,IAAA,IAAIA,IAAI,CAAEG,YAAV,EAAwB;AACtB;AACA;AACA;AACA;AACAA,MAAAA,YAAY,GAAG;QACb,CAACa,mBAAmB,CAACjO,OAAD,CAAnB,CAA6BhB,KAA7B,CAAmCE,EAApC,GAAyC+N,IAAI,CAACG,YAAAA;OADhD,CAAA;AAGD,KARD,MAQO,IAAIH,IAAJ,YAAIA,IAAI,CAAEC,UAAV,EAAsB;AAC3B;AACA,MAAA,IAAIgB,YAAY,GAAG,MAAMC,YAAY,CACnCL,OADmC,EAEnCzT,QAFmC,EAGnC4S,IAAI,CAACC,UAH8B,EAInClN,OAJmC,EAKnC;QAAE7E,OAAO,EAAE8R,IAAI,CAAC9R,OAAAA;AAAhB,OALmC,CAArC,CAAA;;MAQA,IAAI+S,YAAY,CAACE,cAAjB,EAAiC;AAC/B,QAAA,OAAA;AACD,OAAA;;MAEDJ,iBAAiB,GAAGE,YAAY,CAACF,iBAAjC,CAAA;MACAZ,YAAY,GAAGc,YAAY,CAACG,kBAA5B,CAAA;;AAEA,MAAA,IAAIzD,UAAU,GAAA,QAAA,CAAA;AACZzQ,QAAAA,KAAK,EAAE,SADK;AAEZE,QAAAA,QAAAA;OACG4S,EAAAA,IAAI,CAACC,UAHI,CAAd,CAAA;;AAKAQ,MAAAA,iBAAiB,GAAG9C,UAApB,CAAA;AACD,KApFA;;;IAuFD,IAAI;MAAEwD,cAAF;MAAkBpD,UAAlB;AAA8BE,MAAAA,MAAAA;KAAW,GAAA,MAAMoD,aAAa,CAC9DR,OAD8D,EAE9DzT,QAF8D,EAG9D2F,OAH8D,EAI9D0N,iBAJ8D,EAK9DT,IAL8D,IAAA,IAAA,GAAA,KAAA,CAAA,GAK9DA,IAAI,CAAEC,UALwD,EAM9DD,IAN8D,IAM9DA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAE9R,OANwD,EAO9D6S,iBAP8D,EAQ9DZ,YAR8D,CAAhE,CAAA;;AAWA,IAAA,IAAIgB,cAAJ,EAAoB;AAClB,MAAA,OAAA;AACD,KApGA;AAuGD;AACA;;;AACA5C,IAAAA,2BAA2B,GAAG,IAA9B,CAAA;IAEAmB,kBAAkB,CAACtS,QAAD,EAAW;MAC3B2F,OAD2B;MAE3BgL,UAF2B;AAG3BE,MAAAA,MAAAA;AAH2B,KAAX,CAAlB,CAAA;AAKD,GArZ0C;AAwZ3C;;;EACA,eAAeiD,YAAf,CACEL,OADF,EAEEzT,QAFF,EAGE6S,UAHF,EAIElN,OAJF,EAKEiN,IALF,EAK8B;AAE5BK,IAAAA,oBAAoB,GAFQ;;AAK5B,IAAA,IAAI1C,UAAU,GAAA,QAAA,CAAA;AACZzQ,MAAAA,KAAK,EAAE,YADK;AAEZE,MAAAA,QAAAA;AAFY,KAAA,EAGT6S,UAHS,CAAd,CAAA;;AAKAT,IAAAA,WAAW,CAAC;AAAE7B,MAAAA,UAAAA;KAAH,CAAX,CAV4B;;AAa5B,IAAA,IAAI2D,MAAJ,CAAA;AACA,IAAA,IAAIC,WAAW,GAAGC,cAAc,CAACzO,OAAD,EAAU3F,QAAV,CAAhC,CAAA;;AAEA,IAAA,IAAI,CAACmU,WAAW,CAACxP,KAAZ,CAAkBtF,MAAvB,EAA+B;AAC7B6U,MAAAA,MAAM,GAAGG,yBAAyB,CAACrU,QAAD,CAAlC,CAAA;AACD,KAFD,MAEO;MACLkU,MAAM,GAAG,MAAMI,kBAAkB,CAAC,QAAD,EAAWb,OAAX,EAAoBU,WAApB,CAAjC,CAAA;;AAEA,MAAA,IAAIV,OAAO,CAACzG,MAAR,CAAeU,OAAnB,EAA4B;QAC1B,OAAO;AAAEqG,UAAAA,cAAc,EAAE,IAAA;SAAzB,CAAA;AACD,OAAA;AACF,KAAA;;AAED,IAAA,IAAIQ,gBAAgB,CAACL,MAAD,CAApB,EAA8B;AAC5B,MAAA,IAAIM,kBAAkB,GAAA,QAAA,CAAA;AACpB1U,QAAAA,KAAK,EAAE,SADa;QAEpBE,QAAQ,EAAEC,cAAc,CAACH,KAAK,CAACE,QAAP,EAAiBkU,MAAM,CAAClU,QAAxB,CAAA;AAFJ,OAAA,EAGjB6S,UAHiB,CAAtB,CAAA;;MAKA,MAAM4B,uBAAuB,CAACP,MAAD,EAASM,kBAAT,EAA6B5B,IAA7B,IAA6BA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,IAAI,CAAE9R,OAAnC,CAA7B,CAAA;MACA,OAAO;AAAEiT,QAAAA,cAAc,EAAE,IAAA;OAAzB,CAAA;AACD,KAAA;;AAED,IAAA,IAAIW,aAAa,CAACR,MAAD,CAAjB,EAA2B;AACzB;AACA;AACA,MAAA,IAAIS,aAAa,GAAGf,mBAAmB,CAACjO,OAAD,EAAUwO,WAAW,CAACxP,KAAZ,CAAkBE,EAA5B,CAAvC,CAHyB;AAMzB;AACA;AACA;;MACA,IAAI,CAAA+N,IAAI,IAAJ,IAAA,GAAA,KAAA,CAAA,GAAAA,IAAI,CAAE9R,OAAN,MAAkB,IAAtB,EAA4B;QAC1BkQ,aAAa,GAAGC,MAAa,CAACtQ,IAA9B,CAAA;AACD,OAAA;;MAED,OAAO;AACLqT,QAAAA,kBAAkB,EAAE;AAAE,UAAA,CAACW,aAAa,CAAChQ,KAAd,CAAoBE,EAArB,GAA0BqP,MAAM,CAAClQ,KAAAA;AAAnC,SAAA;OADtB,CAAA;AAGD,KAAA;;AAED,IAAA,IAAI4Q,gBAAgB,CAACV,MAAD,CAApB,EAA8B;AAC5B,MAAA,MAAM,IAAIlR,KAAJ,CAAU,qCAAV,CAAN,CAAA;AACD,KAAA;;IAED,OAAO;AACL2Q,MAAAA,iBAAiB,EAAE;AAAE,QAAA,CAACQ,WAAW,CAACxP,KAAZ,CAAkBE,EAAnB,GAAwBqP,MAAM,CAACzI,IAAAA;AAAjC,OAAA;KADrB,CAAA;AAGD,GA3d0C;AA8d3C;;;AACA,EAAA,eAAewI,aAAf,CACER,OADF,EAEEzT,QAFF,EAGE2F,OAHF,EAIEwN,kBAJF,EAKEN,UALF,EAME/R,OANF,EAOE6S,iBAPF,EAQEZ,YARF,EAQ0B;AAExB;IACA,IAAIM,iBAAiB,GAAGF,kBAAxB,CAAA;;IACA,IAAI,CAACE,iBAAL,EAAwB;AACtB,MAAA,IAAI9C,UAAU,GAAgC;AAC5CzQ,QAAAA,KAAK,EAAE,SADqC;QAE5CE,QAF4C;AAG5CiP,QAAAA,UAAU,EAAE/P,SAHgC;AAI5CgQ,QAAAA,UAAU,EAAEhQ,SAJgC;AAK5CiQ,QAAAA,WAAW,EAAEjQ,SAL+B;AAM5CkQ,QAAAA,QAAQ,EAAElQ,SAAAA;OANZ,CAAA;AAQAmU,MAAAA,iBAAiB,GAAG9C,UAApB,CAAA;AACD,KAAA;;AAED,IAAA,IAAI,CAACsE,aAAD,EAAgBC,oBAAhB,CAAwCC,GAAAA,gBAAgB,CAC1DjV,KAD0D,EAE1D6F,OAF0D,EAG1DkN,UAH0D,EAI1D7S,QAJ0D,EAK1DqR,sBAL0D,EAM1DC,uBAN0D,EAO1DC,qBAP0D,EAQ1DoC,iBAR0D,EAS1DZ,YAT0D,EAU1DlB,gBAV0D,CAA5D,CAhBwB;AA8BxB;AACA;;AACA0B,IAAAA,qBAAqB,CAClByB,OAAD,IACE,EAACrP,OAAD,IAAA,IAAA,IAACA,OAAO,CAAE8B,IAAT,CAAeyI,CAAD,IAAOA,CAAC,CAACvL,KAAF,CAAQE,EAAR,KAAemQ,OAApC,CAAD,CACAH,KAAAA,aADA,oBACAA,aAAa,CAAEpN,IAAf,CAAqByI,CAAD,IAAOA,CAAC,CAACvL,KAAF,CAAQE,EAAR,KAAemQ,OAA1C,CADA,CAFiB,CAArB,CAhCwB;;IAuCxB,IAAIH,aAAa,CAACzV,MAAd,KAAyB,CAAzB,IAA8B0V,oBAAoB,CAAC1V,MAArB,KAAgC,CAAlE,EAAqE;MACnEkT,kBAAkB,CAACtS,QAAD,EAAW;QAC3B2F,OAD2B;QAE3BgL,UAAU,EAAE8B,eAAe,CAAC3S,KAAK,CAAC6Q,UAAP,EAAmB,EAAnB,EAAuBhL,OAAvB,CAFA;AAG3B;QACAkL,MAAM,EAAEkC,YAAY,IAAI,IAJG;QAK3BnC,UAAU,EAAE+C,iBAAiB,IAAI,IAAA;AALN,OAAX,CAAlB,CAAA;MAOA,OAAO;AAAEI,QAAAA,cAAc,EAAE,IAAA;OAAzB,CAAA;AACD,KAhDuB;AAmDxB;AACA;AACA;;;IACA,IAAI,CAAC3C,2BAAL,EAAkC;MAChC0D,oBAAoB,CAAC/O,OAArB,CAA6B,KAAU,IAAA;AAAA,QAAA,IAAA,mBAAA,CAAA;;QAAA,IAAT,CAAChG,GAAD,CAAS,GAAA,KAAA,CAAA;AACrC,QAAA,IAAIkV,mBAAmB,GAA6B;AAClDnV,UAAAA,KAAK,EAAE,SAD2C;UAElD2L,IAAI,EAAA,CAAA,mBAAA,GAAE3L,KAAK,CAACgR,QAAN,CAAerD,GAAf,CAAmB1N,GAAnB,CAAF,KAAE,IAAA,GAAA,KAAA,CAAA,GAAA,mBAAA,CAAyB0L,IAFmB;AAGlDwD,UAAAA,UAAU,EAAE/P,SAHsC;AAIlDgQ,UAAAA,UAAU,EAAEhQ,SAJsC;AAKlDiQ,UAAAA,WAAW,EAAEjQ,SALqC;AAMlDkQ,UAAAA,QAAQ,EAAElQ,SAAAA;SANZ,CAAA;AAQAY,QAAAA,KAAK,CAACgR,QAAN,CAAe/E,GAAf,CAAmBhM,GAAnB,EAAwBkV,mBAAxB,CAAA,CAAA;OATF,CAAA,CAAA;MAWA7C,WAAW,CAAA,QAAA,CAAA;AACT7B,QAAAA,UAAU,EAAE8C,iBADH;AAETzC,QAAAA,UAAU,EAAE+C,iBAAiB,IAAI7T,KAAK,CAAC8Q,UAA3B,IAAyC,IAAA;AAF5C,OAAA,EAGLkE,oBAAoB,CAAC1V,MAArB,GAA8B,CAA9B,GACA;AAAE0R,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQjR,KAAK,CAACgR,QAAd,CAAA;OADZ,GAEA,EALK,CAAX,CAAA,CAAA;AAOD,KAAA;;IAEDY,uBAAuB,GAAG,EAAED,kBAA5B,CAAA;IACAqD,oBAAoB,CAAC/O,OAArB,CAA6B,KAAA,IAAA;MAAA,IAAC,CAAChG,GAAD,CAAD,GAAA,KAAA,CAAA;AAAA,MAAA,OAC3ByR,gBAAgB,CAACzF,GAAjB,CAAqBhM,GAArB,EAA0BoR,2BAA1B,CAD2B,CAAA;KAA7B,CAAA,CAAA;IAIA,IAAI;MAAE+D,OAAF;MAAWC,aAAX;AAA0BC,MAAAA,cAAAA;AAA1B,KAAA,GACF,MAAMC,8BAA8B,CAClCvV,KAAK,CAAC6F,OAD4B,EAElCkP,aAFkC,EAGlCC,oBAHkC,EAIlCrB,OAJkC,CADtC,CAAA;;AAQA,IAAA,IAAIA,OAAO,CAACzG,MAAR,CAAeU,OAAnB,EAA4B;MAC1B,OAAO;AAAEqG,QAAAA,cAAc,EAAE,IAAA;OAAzB,CAAA;AACD,KA1FuB;AA6FxB;AACA;;;IACAe,oBAAoB,CAAC/O,OAArB,CAA6B,KAAA,IAAA;MAAA,IAAC,CAAChG,GAAD,CAAD,GAAA,KAAA,CAAA;AAAA,MAAA,OAAWyR,gBAAgB,CAAC7D,MAAjB,CAAwB5N,GAAxB,CAAX,CAAA;AAAA,KAA7B,EA/FwB;;AAkGxB,IAAA,IAAI6O,QAAQ,GAAG0G,YAAY,CAACJ,OAAD,CAA3B,CAAA;;AACA,IAAA,IAAItG,QAAJ,EAAc;AACZ,MAAA,IAAI4F,kBAAkB,GAAGe,iBAAiB,CAACzV,KAAD,EAAQ8O,QAAR,CAA1C,CAAA;AACA,MAAA,MAAM6F,uBAAuB,CAAC7F,QAAD,EAAW4F,kBAAX,EAA+B1T,OAA/B,CAA7B,CAAA;MACA,OAAO;AAAEiT,QAAAA,cAAc,EAAE,IAAA;OAAzB,CAAA;AACD,KAvGuB;;;IA0GxB,IAAI;MAAEpD,UAAF;AAAcE,MAAAA,MAAAA;AAAd,KAAA,GAAyB2E,iBAAiB,CAC5C1V,KAD4C,EAE5C6F,OAF4C,EAG5CkP,aAH4C,EAI5CM,aAJ4C,EAK5CpC,YAL4C,EAM5C+B,oBAN4C,EAO5CM,cAP4C,EAQ5CtD,eAR4C,CAA9C,CA1GwB;;AAsHxBA,IAAAA,eAAe,CAAC/L,OAAhB,CAAwB,CAAC0P,YAAD,EAAeT,OAAf,KAA0B;AAChDS,MAAAA,YAAY,CAAC5H,SAAb,CAAwBH,OAAD,IAAY;AACjC;AACA;AACA;AACA,QAAA,IAAIA,OAAO,IAAI+H,YAAY,CAAC7H,IAA5B,EAAkC;UAChCkE,eAAe,CAACnE,MAAhB,CAAuBqH,OAAvB,CAAA,CAAA;AACD,SAAA;OANH,CAAA,CAAA;KADF,CAAA,CAAA;IAWAU,sBAAsB,EAAA,CAAA;AACtB,IAAA,IAAIC,kBAAkB,GAAGC,oBAAoB,CAAClE,uBAAD,CAA7C,CAAA;AAEA,IAAA,OAAA,QAAA,CAAA;MACEf,UADF;AAEEE,MAAAA,MAAAA;AAFF,KAAA,EAGM8E,kBAAkB,IAAIb,oBAAoB,CAAC1V,MAArB,GAA8B,CAApD,GACA;AAAE0R,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQjR,KAAK,CAACgR,QAAd,CAAA;AAAZ,KADA,GAEA,EALN,CAAA,CAAA;AAOD,GAAA;;EAED,SAAS+E,UAAT,CAAiC9V,GAAjC,EAA4C;IAC1C,OAAOD,KAAK,CAACgR,QAAN,CAAerD,GAAf,CAAmB1N,GAAnB,KAA2BsP,YAAlC,CAAA;AACD,GAtnB0C;;;EAynB3C,SAASyG,KAAT,CACE/V,GADF,EAEEiV,OAFF,EAGE3S,IAHF,EAIEuQ,IAJF,EAI2B;AAEzB,IAAA,IAAI,OAAO/F,eAAP,KAA2B,WAA/B,EAA4C;AAC1C,MAAA,MAAM,IAAI7J,KAAJ,CACJ,8EACE,8EADF,GAEE,6CAHE,CAAN,CAAA;AAKD,KAAA;;IAED,IAAIwO,gBAAgB,CAACxM,GAAjB,CAAqBjF,GAArB,CAAJ,EAA+BgW,YAAY,CAAChW,GAAD,CAAZ,CAAA;IAE/B,IAAI4F,OAAO,GAAGP,WAAW,CAACmK,UAAD,EAAalN,IAAb,EAAmBqJ,IAAI,CAACpG,QAAxB,CAAzB,CAAA;;IACA,IAAI,CAACK,OAAL,EAAc;AACZqQ,MAAAA,eAAe,CAACjW,GAAD,EAAMiV,OAAN,EAAe,IAAInG,aAAJ,CAAkB,GAAlB,EAAuB,WAAvB,EAAoC,IAApC,CAAf,CAAf,CAAA;AACA,MAAA,OAAA;AACD,KAAA;;IAED,IAAI;MAAEtL,IAAF;AAAQsP,MAAAA,UAAAA;AAAR,KAAA,GAAuBC,wBAAwB,CAACzQ,IAAD,EAAOuQ,IAAP,CAAnD,CAAA;AACA,IAAA,IAAIvK,KAAK,GAAG+L,cAAc,CAACzO,OAAD,EAAUpC,IAAV,CAA1B,CAAA;;AAEA,IAAA,IAAIsP,UAAJ,EAAgB;MACdoD,mBAAmB,CAAClW,GAAD,EAAMiV,OAAN,EAAezR,IAAf,EAAqB8E,KAArB,EAA4BwK,UAA5B,CAAnB,CAAA;AACA,MAAA,OAAA;AACD,KAxBwB;AA2BzB;;;IACAhB,gBAAgB,CAAC9F,GAAjB,CAAqBhM,GAArB,EAA0B,CAACwD,IAAD,EAAO8E,KAAP,CAA1B,CAAA,CAAA;IACA6N,mBAAmB,CAACnW,GAAD,EAAMiV,OAAN,EAAezR,IAAf,EAAqB8E,KAArB,CAAnB,CAAA;AACD,GA3pB0C;AA8pB3C;;;EACA,eAAe4N,mBAAf,CACElW,GADF,EAEEiV,OAFF,EAGEzR,IAHF,EAIE8E,KAJF,EAKEwK,UALF,EAKwB;AAAA,IAAA,IAAA,oBAAA,CAAA;;IAEtBI,oBAAoB,EAAA,CAAA;IACpBpB,gBAAgB,CAAClE,MAAjB,CAAwB5N,GAAxB,CAAA,CAAA;;AAEA,IAAA,IAAI,CAACsI,KAAK,CAAC1D,KAAN,CAAYtF,MAAjB,EAAyB;MACvB,IAAI;AAAE2E,QAAAA,KAAAA;OAAUqQ,GAAAA,yBAAyB,CAAC9Q,IAAD,CAAzC,CAAA;AACAyS,MAAAA,eAAe,CAACjW,GAAD,EAAMiV,OAAN,EAAehR,KAAf,CAAf,CAAA;AACA,MAAA,OAAA;AACD,KATqB;;;AAYtB,IAAA,IAAImS,OAAO,GAAA,QAAA,CAAA;AACTrW,MAAAA,KAAK,EAAE,YAAA;AADE,KAAA,EAEN+S,UAFM,EAAA;MAGTpH,IAAI,EAAE,CAAA3L,CAAAA,oBAAAA,GAAAA,KAAK,CAACgR,QAAN,CAAerD,GAAf,CAAmB1N,GAAnB,CAAyB0L,KAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oBAAAA,CAAAA,IAAzB,KAAiCvM,SAAAA;KAHzC,CAAA,CAAA;;AAKAY,IAAAA,KAAK,CAACgR,QAAN,CAAe/E,GAAf,CAAmBhM,GAAnB,EAAwBoW,OAAxB,CAAA,CAAA;AACA/D,IAAAA,WAAW,CAAC;AAAEtB,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQjR,KAAK,CAACgR,QAAd,CAAA;KAAb,CAAX,CAlBsB;;AAqBtB,IAAA,IAAIsF,eAAe,GAAG,IAAIvJ,eAAJ,EAAtB,CAAA;IACA,IAAIwJ,YAAY,GAAG3C,aAAa,CAACnQ,IAAD,EAAO6S,eAAe,CAACpJ,MAAvB,EAA+B6F,UAA/B,CAAhC,CAAA;AACArB,IAAAA,gBAAgB,CAACzF,GAAjB,CAAqBhM,GAArB,EAA0BqW,eAA1B,CAAA,CAAA;IAEA,IAAIE,YAAY,GAAG,MAAMhC,kBAAkB,CAAC,QAAD,EAAW+B,YAAX,EAAyBhO,KAAzB,CAA3C,CAAA;;AAEA,IAAA,IAAIgO,YAAY,CAACrJ,MAAb,CAAoBU,OAAxB,EAAiC;AAC/B;AACA;AACA,MAAA,IAAI8D,gBAAgB,CAAC/D,GAAjB,CAAqB1N,GAArB,CAAA,KAA8BqW,eAAlC,EAAmD;QACjD5E,gBAAgB,CAAC7D,MAAjB,CAAwB5N,GAAxB,CAAA,CAAA;AACD,OAAA;;AACD,MAAA,OAAA;AACD,KAAA;;AAED,IAAA,IAAIwU,gBAAgB,CAAC+B,YAAD,CAApB,EAAoC;MAClC9E,gBAAgB,CAAC7D,MAAjB,CAAwB5N,GAAxB,CAAA,CAAA;MACA6R,gBAAgB,CAAC3M,GAAjB,CAAqBlF,GAArB,CAAA,CAAA;;AACA,MAAA,IAAIwW,cAAc,GAAA,QAAA,CAAA;AAChBzW,QAAAA,KAAK,EAAE,SAAA;AADS,OAAA,EAEb+S,UAFa,EAAA;AAGhBpH,QAAAA,IAAI,EAAEvM,SAAAA;OAHR,CAAA,CAAA;;AAKAY,MAAAA,KAAK,CAACgR,QAAN,CAAe/E,GAAf,CAAmBhM,GAAnB,EAAwBwW,cAAxB,CAAA,CAAA;AACAnE,MAAAA,WAAW,CAAC;AAAEtB,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQjR,KAAK,CAACgR,QAAd,CAAA;AAAZ,OAAD,CAAX,CAAA;;AAEA,MAAA,IAAI0D,kBAAkB,GAAA,QAAA,CAAA;AACpB1U,QAAAA,KAAK,EAAE,SADa;QAEpBE,QAAQ,EAAEC,cAAc,CAACH,KAAK,CAACE,QAAP,EAAiBsW,YAAY,CAACtW,QAA9B,CAAA;AAFJ,OAAA,EAGjB6S,UAHiB,CAAtB,CAAA;;AAKA,MAAA,MAAM4B,uBAAuB,CAAC6B,YAAD,EAAe9B,kBAAf,CAA7B,CAAA;AACA,MAAA,OAAA;AACD,KAtDqB;;;AAyDtB,IAAA,IAAIE,aAAa,CAAC4B,YAAD,CAAjB,EAAiC;MAC/BN,eAAe,CAACjW,GAAD,EAAMiV,OAAN,EAAesB,YAAY,CAACtS,KAA5B,CAAf,CAAA;AACA,MAAA,OAAA;AACD,KAAA;;AAED,IAAA,IAAI4Q,gBAAgB,CAAC0B,YAAD,CAApB,EAAoC;AAClCvR,MAAAA,SAAS,CAAC,KAAD,EAAQ,qCAAR,CAAT,CAAA;AACD,KAhEqB;AAmEtB;;;IACA,IAAInE,YAAY,GAAGd,KAAK,CAACyQ,UAAN,CAAiBvQ,QAAjB,IAA6BF,KAAK,CAACE,QAAtD,CAAA;IACA,IAAIwW,mBAAmB,GAAG9C,aAAa,CACrC9S,YADqC,EAErCwV,eAAe,CAACpJ,MAFqB,CAAvC,CAAA;IAIA,IAAIrH,OAAO,GACT7F,KAAK,CAACyQ,UAAN,CAAiBzQ,KAAjB,KAA2B,MAA3B,GACIsF,WAAW,CAACmK,UAAD,EAAazP,KAAK,CAACyQ,UAAN,CAAiBvQ,QAA9B,EAAwC0L,IAAI,CAACpG,QAA7C,CADf,GAEIxF,KAAK,CAAC6F,OAHZ,CAAA;AAKAZ,IAAAA,SAAS,CAACY,OAAD,EAAU,8CAAV,CAAT,CAAA;IAEA,IAAI8Q,MAAM,GAAG,EAAEhF,kBAAf,CAAA;AACAE,IAAAA,cAAc,CAAC5F,GAAf,CAAmBhM,GAAnB,EAAwB0W,MAAxB,CAAA,CAAA;;AAEA,IAAA,IAAIC,WAAW,GAAA,QAAA,CAAA;AACb5W,MAAAA,KAAK,EAAE,SADM;MAEb2L,IAAI,EAAE6K,YAAY,CAAC7K,IAAAA;AAFN,KAAA,EAGVoH,UAHU,CAAf,CAAA;;AAKA/S,IAAAA,KAAK,CAACgR,QAAN,CAAe/E,GAAf,CAAmBhM,GAAnB,EAAwB2W,WAAxB,CAAA,CAAA;IAEA,IAAI,CAAC7B,aAAD,EAAgBC,oBAAhB,IAAwCC,gBAAgB,CAC1DjV,KAD0D,EAE1D6F,OAF0D,EAG1DkN,UAH0D,EAI1DjS,YAJ0D,EAK1DyQ,sBAL0D,EAM1DC,uBAN0D,EAO1DC,qBAP0D,EAQ1D;AAAE,MAAA,CAAClJ,KAAK,CAAC1D,KAAN,CAAYE,EAAb,GAAkByR,YAAY,CAAC7K,IAAAA;KARyB,EAS1DvM,SAT0D;IAU1D2S,gBAV0D,CAA5D,CA1FsB;AAwGtB;AACA;;IACAiD,oBAAoB,CACjBpN,MADH,CACU,KAAA,IAAA;MAAA,IAAC,CAACiP,QAAD,CAAD,GAAA,KAAA,CAAA;MAAA,OAAgBA,QAAQ,KAAK5W,GAA7B,CAAA;KADV,CAAA,CAEGgG,OAFH,CAEW,KAAe,IAAA;AAAA,MAAA,IAAA,oBAAA,CAAA;;MAAA,IAAd,CAAC4Q,QAAD,CAAc,GAAA,KAAA,CAAA;AACtB,MAAA,IAAI1B,mBAAmB,GAA6B;AAClDnV,QAAAA,KAAK,EAAE,SAD2C;QAElD2L,IAAI,EAAA,CAAA,oBAAA,GAAE3L,KAAK,CAACgR,QAAN,CAAerD,GAAf,CAAmBkJ,QAAnB,CAAF,KAAE,IAAA,GAAA,KAAA,CAAA,GAAA,oBAAA,CAA8BlL,IAFc;AAGlDwD,QAAAA,UAAU,EAAE/P,SAHsC;AAIlDgQ,QAAAA,UAAU,EAAEhQ,SAJsC;AAKlDiQ,QAAAA,WAAW,EAAEjQ,SALqC;AAMlDkQ,QAAAA,QAAQ,EAAElQ,SAAAA;OANZ,CAAA;AAQAY,MAAAA,KAAK,CAACgR,QAAN,CAAe/E,GAAf,CAAmB4K,QAAnB,EAA6B1B,mBAA7B,CAAA,CAAA;AACAzD,MAAAA,gBAAgB,CAACzF,GAAjB,CAAqB4K,QAArB,EAA+BP,eAA/B,CAAA,CAAA;KAZJ,CAAA,CAAA;AAeAhE,IAAAA,WAAW,CAAC;AAAEtB,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQjR,KAAK,CAACgR,QAAd,CAAA;AAAZ,KAAD,CAAX,CAAA;IAEA,IAAI;MAAEoE,OAAF;MAAWC,aAAX;AAA0BC,MAAAA,cAAAA;AAA1B,KAAA,GACF,MAAMC,8BAA8B,CAClCvV,KAAK,CAAC6F,OAD4B,EAElCkP,aAFkC,EAGlCC,oBAHkC,EAIlC0B,mBAJkC,CADtC,CAAA;;AAQA,IAAA,IAAIJ,eAAe,CAACpJ,MAAhB,CAAuBU,OAA3B,EAAoC;AAClC,MAAA,OAAA;AACD,KAAA;;IAEDiE,cAAc,CAAChE,MAAf,CAAsB5N,GAAtB,CAAA,CAAA;IACAyR,gBAAgB,CAAC7D,MAAjB,CAAwB5N,GAAxB,CAAA,CAAA;IACA+U,oBAAoB,CAAC/O,OAArB,CAA6B,KAAA,IAAA;MAAA,IAAC,CAAC4Q,QAAD,CAAD,GAAA,KAAA,CAAA;AAAA,MAAA,OAC3BnF,gBAAgB,CAAC7D,MAAjB,CAAwBgJ,QAAxB,CAD2B,CAAA;KAA7B,CAAA,CAAA;AAIA,IAAA,IAAI/H,QAAQ,GAAG0G,YAAY,CAACJ,OAAD,CAA3B,CAAA;;AACA,IAAA,IAAItG,QAAJ,EAAc;AACZ,MAAA,IAAI4F,kBAAkB,GAAGe,iBAAiB,CAACzV,KAAD,EAAQ8O,QAAR,CAA1C,CAAA;AACA,MAAA,MAAM6F,uBAAuB,CAAC7F,QAAD,EAAW4F,kBAAX,CAA7B,CAAA;AACA,MAAA,OAAA;AACD,KAlJqB;;;IAqJtB,IAAI;MAAE7D,UAAF;AAAcE,MAAAA,MAAAA;AAAd,KAAA,GAAyB2E,iBAAiB,CAC5C1V,KAD4C,EAE5CA,KAAK,CAAC6F,OAFsC,EAG5CkP,aAH4C,EAI5CM,aAJ4C,EAK5CjW,SAL4C,EAM5C4V,oBAN4C,EAO5CM,cAP4C,EAQ5CtD,eAR4C,CAA9C,CAAA;AAWA,IAAA,IAAI8E,WAAW,GAA0B;AACvC9W,MAAAA,KAAK,EAAE,MADgC;MAEvC2L,IAAI,EAAE6K,YAAY,CAAC7K,IAFoB;AAGvCwD,MAAAA,UAAU,EAAE/P,SAH2B;AAIvCgQ,MAAAA,UAAU,EAAEhQ,SAJ2B;AAKvCiQ,MAAAA,WAAW,EAAEjQ,SAL0B;AAMvCkQ,MAAAA,QAAQ,EAAElQ,SAAAA;KANZ,CAAA;AAQAY,IAAAA,KAAK,CAACgR,QAAN,CAAe/E,GAAf,CAAmBhM,GAAnB,EAAwB6W,WAAxB,CAAA,CAAA;AAEA,IAAA,IAAIjB,kBAAkB,GAAGC,oBAAoB,CAACa,MAAD,CAA7C,CA1KsB;AA6KtB;AACA;;IACA,IACE3W,KAAK,CAACyQ,UAAN,CAAiBzQ,KAAjB,KAA2B,SAA3B,IACA2W,MAAM,GAAG/E,uBAFX,EAGE;AAAA,MAAA,IAAA,sBAAA,CAAA;;AACA3M,MAAAA,SAAS,CAACiM,aAAD,EAAgB,yBAAhB,CAAT,CAAA;MACA,CAAAG,sBAAAA,GAAAA,2BAA2B,KAA3B,IAAA,GAAA,KAAA,CAAA,GAAA,sBAAA,CAA6BpD,KAA7B,EAAA,CAAA;AAEAuE,MAAAA,kBAAkB,CAACxS,KAAK,CAACyQ,UAAN,CAAiBvQ,QAAlB,EAA4B;QAC5C2F,OAD4C;QAE5CgL,UAF4C;QAG5CE,MAH4C;AAI5CC,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQjR,KAAK,CAACgR,QAAd,CAAA;AAJkC,OAA5B,CAAlB,CAAA;AAMD,KAbD,MAaO;AACL;AACA;AACA;MACAsB,WAAW,CAAA,QAAA,CAAA;QACTvB,MADS;QAETF,UAAU,EAAE8B,eAAe,CAAC3S,KAAK,CAAC6Q,UAAP,EAAmBA,UAAnB,EAA+BhL,OAA/B,CAAA;AAFlB,OAAA,EAGLgQ,kBAAkB,GAAG;AAAE7E,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQjR,KAAK,CAACgR,QAAd,CAAA;OAAf,GAA2C,EAHxD,CAAX,CAAA,CAAA;AAKAO,MAAAA,sBAAsB,GAAG,KAAzB,CAAA;AACD,KAAA;AACF,GA32B0C;;;EA82B3C,eAAe6E,mBAAf,CACEnW,GADF,EAEEiV,OAFF,EAGEzR,IAHF,EAIE8E,KAJF,EAI+B;AAAA,IAAA,IAAA,oBAAA,CAAA;;AAE7B;AACA,IAAA,IAAIkO,cAAc,GAA6B;AAC7CzW,MAAAA,KAAK,EAAE,SADsC;AAE7CmP,MAAAA,UAAU,EAAE/P,SAFiC;AAG7CgQ,MAAAA,UAAU,EAAEhQ,SAHiC;AAI7CiQ,MAAAA,WAAW,EAAEjQ,SAJgC;AAK7CkQ,MAAAA,QAAQ,EAAElQ,SALmC;MAM7CuM,IAAI,EAAE,CAAA3L,CAAAA,oBAAAA,GAAAA,KAAK,CAACgR,QAAN,CAAerD,GAAf,CAAmB1N,GAAnB,CAAyB0L,KAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,oBAAAA,CAAAA,IAAzB,KAAiCvM,SAAAA;KANzC,CAAA;AAQAY,IAAAA,KAAK,CAACgR,QAAN,CAAe/E,GAAf,CAAmBhM,GAAnB,EAAwBwW,cAAxB,CAAA,CAAA;AACAnE,IAAAA,WAAW,CAAC;AAAEtB,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQjR,KAAK,CAACgR,QAAd,CAAA;KAAb,CAAX,CAZ6B;;AAe7B,IAAA,IAAIsF,eAAe,GAAG,IAAIvJ,eAAJ,EAAtB,CAAA;IACA,IAAIwJ,YAAY,GAAG3C,aAAa,CAACnQ,IAAD,EAAO6S,eAAe,CAACpJ,MAAvB,CAAhC,CAAA;AACAwE,IAAAA,gBAAgB,CAACzF,GAAjB,CAAqBhM,GAArB,EAA0BqW,eAA1B,CAAA,CAAA;AACA,IAAA,IAAIlC,MAAM,GAAe,MAAMI,kBAAkB,CAC/C,QAD+C,EAE/C+B,YAF+C,EAG/ChO,KAH+C,CAAjD,CAlB6B;AAyB7B;AACA;AACA;;AACA,IAAA,IAAIuM,gBAAgB,CAACV,MAAD,CAApB,EAA8B;AAC5BA,MAAAA,MAAM,GACJ,CAAC,MAAM2C,mBAAmB,CAAC3C,MAAD,EAASmC,YAAY,CAACrJ,MAAtB,EAA8B,IAA9B,CAA1B,KACAkH,MAFF,CAAA;AAGD,KAhC4B;AAmC7B;;;AACA,IAAA,IAAI1C,gBAAgB,CAAC/D,GAAjB,CAAqB1N,GAArB,CAAA,KAA8BqW,eAAlC,EAAmD;MACjD5E,gBAAgB,CAAC7D,MAAjB,CAAwB5N,GAAxB,CAAA,CAAA;AACD,KAAA;;AAED,IAAA,IAAIsW,YAAY,CAACrJ,MAAb,CAAoBU,OAAxB,EAAiC;AAC/B,MAAA,OAAA;AACD,KA1C4B;;;AA6C7B,IAAA,IAAI6G,gBAAgB,CAACL,MAAD,CAApB,EAA8B;AAC5B,MAAA,IAAIM,kBAAkB,GAAGe,iBAAiB,CAACzV,KAAD,EAAQoU,MAAR,CAA1C,CAAA;AACA,MAAA,MAAMO,uBAAuB,CAACP,MAAD,EAASM,kBAAT,CAA7B,CAAA;AACA,MAAA,OAAA;AACD,KAjD4B;;;AAoD7B,IAAA,IAAIE,aAAa,CAACR,MAAD,CAAjB,EAA2B;MACzB,IAAIS,aAAa,GAAGf,mBAAmB,CAAC9T,KAAK,CAAC6F,OAAP,EAAgBqP,OAAhB,CAAvC,CAAA;AACAlV,MAAAA,KAAK,CAACgR,QAAN,CAAenD,MAAf,CAAsB5N,GAAtB,EAFyB;AAIzB;AACA;;AACAqS,MAAAA,WAAW,CAAC;AACVtB,QAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQjR,KAAK,CAACgR,QAAd,CADA;AAEVD,QAAAA,MAAM,EAAE;AACN,UAAA,CAAC8D,aAAa,CAAChQ,KAAd,CAAoBE,EAArB,GAA0BqP,MAAM,CAAClQ,KAAAA;AAD3B,SAAA;AAFE,OAAD,CAAX,CAAA;AAMA,MAAA,OAAA;AACD,KAAA;;IAEDe,SAAS,CAAC,CAAC6P,gBAAgB,CAACV,MAAD,CAAlB,EAA4B,iCAA5B,CAAT,CAnE6B;;AAsE7B,IAAA,IAAI0C,WAAW,GAA0B;AACvC9W,MAAAA,KAAK,EAAE,MADgC;MAEvC2L,IAAI,EAAEyI,MAAM,CAACzI,IAF0B;AAGvCwD,MAAAA,UAAU,EAAE/P,SAH2B;AAIvCgQ,MAAAA,UAAU,EAAEhQ,SAJ2B;AAKvCiQ,MAAAA,WAAW,EAAEjQ,SAL0B;AAMvCkQ,MAAAA,QAAQ,EAAElQ,SAAAA;KANZ,CAAA;AAQAY,IAAAA,KAAK,CAACgR,QAAN,CAAe/E,GAAf,CAAmBhM,GAAnB,EAAwB6W,WAAxB,CAAA,CAAA;AACAxE,IAAAA,WAAW,CAAC;AAAEtB,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQjR,KAAK,CAACgR,QAAd,CAAA;AAAZ,KAAD,CAAX,CAAA;AACD,GAAA;AAED;;;;;;;;;;;;;;;;;;AAkBG;;;AACH,EAAA,eAAe2D,uBAAf,CACE7F,QADF,EAEE2B,UAFF,EAGEzP,OAHF,EAGmB;IAEjB,IAAI8N,QAAQ,CAACoE,UAAb,EAAyB;AACvB3B,MAAAA,sBAAsB,GAAG,IAAzB,CAAA;AACD,KAAA;;IACDtM,SAAS,CACPwL,UAAU,CAACvQ,QADJ,EAEP,gDAFO,CAAT,CALiB;AAUjB;;AACAmR,IAAAA,2BAA2B,GAAG,IAA9B,CAAA;AAEA,IAAA,IAAI2F,qBAAqB,GACvBhW,OAAO,KAAK,IAAZ,GAAmBmQ,MAAa,CAAClQ,OAAjC,GAA2CkQ,MAAa,CAACtQ,IAD3D,CAAA;AAEA,IAAA,MAAMqR,eAAe,CAAC8E,qBAAD,EAAwBvG,UAAU,CAACvQ,QAAnC,EAA6C;AAChEmT,MAAAA,kBAAkB,EAAE5C,UAAAA;AAD4C,KAA7C,CAArB,CAAA;AAGD,GAAA;;EAED,eAAe8E,8BAAf,CACE0B,cADF,EAEElC,aAFF,EAGEmC,cAHF,EAIEvD,OAJF,EAIkB;AAEhB;AACA;AACA;AACA,IAAA,IAAIyB,OAAO,GAAG,MAAMxI,OAAO,CAACuK,GAAR,CAAY,CAC9B,GAAGpC,aAAa,CAAC/V,GAAd,CAAmBoR,CAAD,IAAOoE,kBAAkB,CAAC,QAAD,EAAWb,OAAX,EAAoBvD,CAApB,CAA3C,CAD2B,EAE9B,GAAG8G,cAAc,CAAClY,GAAf,CAAmB,KAAA,IAAA;AAAA,MAAA,IAAC,GAAGuD,IAAH,EAASgG,KAAT,CAAD,GAAA,KAAA,CAAA;AAAA,MAAA,OACpBiM,kBAAkB,CAAC,QAAD,EAAWZ,aAAa,CAACrR,IAAD,EAAOoR,OAAO,CAACzG,MAAf,CAAxB,EAAgD3E,KAAhD,CADE,CAAA;KAAnB,CAF2B,CAAZ,CAApB,CAAA;IAMA,IAAI8M,aAAa,GAAGD,OAAO,CAACxS,KAAR,CAAc,CAAd,EAAiBmS,aAAa,CAACzV,MAA/B,CAApB,CAAA;IACA,IAAIgW,cAAc,GAAGF,OAAO,CAACxS,KAAR,CAAcmS,aAAa,CAACzV,MAA5B,CAArB,CAAA;AAEA,IAAA,MAAMsN,OAAO,CAACuK,GAAR,CAAY,CAChBC,sBAAsB,CACpBH,cADoB,EAEpBlC,aAFoB,EAGpBM,aAHoB,EAIpB1B,OAAO,CAACzG,MAJY,EAKpB,KALoB,EAMpBlN,KAAK,CAAC6Q,UANc,CADN,EAShBuG,sBAAsB,CACpBH,cADoB,EAEpBC,cAAc,CAAClY,GAAf,CAAmB,KAAA,IAAA;MAAA,IAAC,IAAKuJ,KAAL,CAAD,GAAA,KAAA,CAAA;AAAA,MAAA,OAAiBA,KAAjB,CAAA;KAAnB,CAFoB,EAGpB+M,cAHoB,EAIpB3B,OAAO,CAACzG,MAJY,EAKpB,IALoB,CATN,CAAZ,CAAN,CAAA;IAkBA,OAAO;MAAEkI,OAAF;MAAWC,aAAX;AAA0BC,MAAAA,cAAAA;KAAjC,CAAA;AACD,GAAA;;AAED,EAAA,SAASnC,oBAAT,GAA6B;AAC3B;IACA5B,sBAAsB,GAAG,IAAzB,CAF2B;AAK3B;;AACAC,IAAAA,uBAAuB,CAAC5Q,IAAxB,CAA6B,GAAG6S,qBAAqB,EAArD,EAN2B;;AAS3B1B,IAAAA,gBAAgB,CAAC9L,OAAjB,CAAyB,CAAC6C,CAAD,EAAI7I,GAAJ,KAAW;AAClC,MAAA,IAAIyR,gBAAgB,CAACxM,GAAjB,CAAqBjF,GAArB,CAAJ,EAA+B;QAC7BwR,qBAAqB,CAAC7Q,IAAtB,CAA2BX,GAA3B,CAAA,CAAA;QACAgW,YAAY,CAAChW,GAAD,CAAZ,CAAA;AACD,OAAA;KAJH,CAAA,CAAA;AAMD,GAAA;;AAED,EAAA,SAASiW,eAAT,CAAyBjW,GAAzB,EAAsCiV,OAAtC,EAAuDhR,KAAvD,EAAiE;IAC/D,IAAI2Q,aAAa,GAAGf,mBAAmB,CAAC9T,KAAK,CAAC6F,OAAP,EAAgBqP,OAAhB,CAAvC,CAAA;IACA7C,aAAa,CAACpS,GAAD,CAAb,CAAA;AACAqS,IAAAA,WAAW,CAAC;AACVvB,MAAAA,MAAM,EAAE;AACN,QAAA,CAAC8D,aAAa,CAAChQ,KAAd,CAAoBE,EAArB,GAA0Bb,KAAAA;OAFlB;AAIV8M,MAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQjR,KAAK,CAACgR,QAAd,CAAA;AAJA,KAAD,CAAX,CAAA;AAMD,GAAA;;EAED,SAASqB,aAAT,CAAuBpS,GAAvB,EAAkC;IAChC,IAAIyR,gBAAgB,CAACxM,GAAjB,CAAqBjF,GAArB,CAAJ,EAA+BgW,YAAY,CAAChW,GAAD,CAAZ,CAAA;IAC/B8R,gBAAgB,CAAClE,MAAjB,CAAwB5N,GAAxB,CAAA,CAAA;IACA4R,cAAc,CAAChE,MAAf,CAAsB5N,GAAtB,CAAA,CAAA;IACA6R,gBAAgB,CAACjE,MAAjB,CAAwB5N,GAAxB,CAAA,CAAA;AACAD,IAAAA,KAAK,CAACgR,QAAN,CAAenD,MAAf,CAAsB5N,GAAtB,CAAA,CAAA;AACD,GAAA;;EAED,SAASgW,YAAT,CAAsBhW,GAAtB,EAAiC;AAC/B,IAAA,IAAI6M,UAAU,GAAG4E,gBAAgB,CAAC/D,GAAjB,CAAqB1N,GAArB,CAAjB,CAAA;AACAgF,IAAAA,SAAS,CAAC6H,UAAD,EAA2C7M,6BAAAA,GAAAA,GAA3C,CAAT,CAAA;AACA6M,IAAAA,UAAU,CAACmB,KAAX,EAAA,CAAA;IACAyD,gBAAgB,CAAC7D,MAAjB,CAAwB5N,GAAxB,CAAA,CAAA;AACD,GAAA;;EAED,SAASoX,gBAAT,CAA0BC,IAA1B,EAAwC;AACtC,IAAA,KAAK,IAAIrX,GAAT,IAAgBqX,IAAhB,EAAsB;AACpB,MAAA,IAAIjB,OAAO,GAAGN,UAAU,CAAC9V,GAAD,CAAxB,CAAA;AACA,MAAA,IAAI6W,WAAW,GAA0B;AACvC9W,QAAAA,KAAK,EAAE,MADgC;QAEvC2L,IAAI,EAAE0K,OAAO,CAAC1K,IAFyB;AAGvCwD,QAAAA,UAAU,EAAE/P,SAH2B;AAIvCgQ,QAAAA,UAAU,EAAEhQ,SAJ2B;AAKvCiQ,QAAAA,WAAW,EAAEjQ,SAL0B;AAMvCkQ,QAAAA,QAAQ,EAAElQ,SAAAA;OANZ,CAAA;AAQAY,MAAAA,KAAK,CAACgR,QAAN,CAAe/E,GAAf,CAAmBhM,GAAnB,EAAwB6W,WAAxB,CAAA,CAAA;AACD,KAAA;AACF,GAAA;;AAED,EAAA,SAASlB,sBAAT,GAA+B;IAC7B,IAAI2B,QAAQ,GAAG,EAAf,CAAA;;AACA,IAAA,KAAK,IAAItX,GAAT,IAAgB6R,gBAAhB,EAAkC;MAChC,IAAIuE,OAAO,GAAGrW,KAAK,CAACgR,QAAN,CAAerD,GAAf,CAAmB1N,GAAnB,CAAd,CAAA;AACAgF,MAAAA,SAAS,CAACoR,OAAD,EAA+BpW,oBAAAA,GAAAA,GAA/B,CAAT,CAAA;;AACA,MAAA,IAAIoW,OAAO,CAACrW,KAAR,KAAkB,SAAtB,EAAiC;QAC/B8R,gBAAgB,CAACjE,MAAjB,CAAwB5N,GAAxB,CAAA,CAAA;QACAsX,QAAQ,CAAC3W,IAAT,CAAcX,GAAd,CAAA,CAAA;AACD,OAAA;AACF,KAAA;;IACDoX,gBAAgB,CAACE,QAAD,CAAhB,CAAA;AACD,GAAA;;EAED,SAASzB,oBAAT,CAA8B0B,QAA9B,EAA8C;IAC5C,IAAIC,UAAU,GAAG,EAAjB,CAAA;;IACA,KAAK,IAAI,CAACxX,GAAD,EAAM8E,EAAN,CAAT,IAAsB8M,cAAtB,EAAsC;MACpC,IAAI9M,EAAE,GAAGyS,QAAT,EAAmB;QACjB,IAAInB,OAAO,GAAGrW,KAAK,CAACgR,QAAN,CAAerD,GAAf,CAAmB1N,GAAnB,CAAd,CAAA;AACAgF,QAAAA,SAAS,CAACoR,OAAD,EAA+BpW,oBAAAA,GAAAA,GAA/B,CAAT,CAAA;;AACA,QAAA,IAAIoW,OAAO,CAACrW,KAAR,KAAkB,SAAtB,EAAiC;UAC/BiW,YAAY,CAAChW,GAAD,CAAZ,CAAA;UACA4R,cAAc,CAAChE,MAAf,CAAsB5N,GAAtB,CAAA,CAAA;UACAwX,UAAU,CAAC7W,IAAX,CAAgBX,GAAhB,CAAA,CAAA;AACD,SAAA;AACF,OAAA;AACF,KAAA;;IACDoX,gBAAgB,CAACI,UAAD,CAAhB,CAAA;AACA,IAAA,OAAOA,UAAU,CAACnY,MAAX,GAAoB,CAA3B,CAAA;AACD,GAAA;;EAED,SAASmU,qBAAT,CACEiE,SADF,EAC0C;IAExC,IAAIC,iBAAiB,GAAa,EAAlC,CAAA;AACA3F,IAAAA,eAAe,CAAC/L,OAAhB,CAAwB,CAAC2R,GAAD,EAAM1C,OAAN,KAAiB;AACvC,MAAA,IAAI,CAACwC,SAAD,IAAcA,SAAS,CAACxC,OAAD,CAA3B,EAAsC;AACpC;AACA;AACA;AACA0C,QAAAA,GAAG,CAAC5J,MAAJ,EAAA,CAAA;QACA2J,iBAAiB,CAAC/W,IAAlB,CAAuBsU,OAAvB,CAAA,CAAA;QACAlD,eAAe,CAACnE,MAAhB,CAAuBqH,OAAvB,CAAA,CAAA;AACD,OAAA;KARH,CAAA,CAAA;AAUA,IAAA,OAAOyC,iBAAP,CAAA;AACD,GA5nC0C;AA+nC3C;;;AACA,EAAA,SAASE,uBAAT,CACEC,SADF,EAEEC,WAFF,EAGEC,MAHF,EAG0C;AAExCpI,IAAAA,oBAAoB,GAAGkI,SAAvB,CAAA;AACAhI,IAAAA,iBAAiB,GAAGiI,WAApB,CAAA;;IACAlI,uBAAuB,GAAGmI,MAAM,KAAM9X,QAAD,IAAcA,QAAQ,CAACD,GAA5B,CAAhC,CAJwC;AAOxC;AACA;;;IACA,IAAI,CAAC8P,qBAAD,IAA0B/P,KAAK,CAACyQ,UAAN,KAAqBvB,eAAnD,EAAoE;AAClEa,MAAAA,qBAAqB,GAAG,IAAxB,CAAA;MACA,IAAIkI,CAAC,GAAGrF,sBAAsB,CAAC5S,KAAK,CAACE,QAAP,EAAiBF,KAAK,CAAC6F,OAAvB,CAA9B,CAAA;;MACA,IAAIoS,CAAC,IAAI,IAAT,EAAe;AACb3F,QAAAA,WAAW,CAAC;AAAE5B,UAAAA,qBAAqB,EAAEuH,CAAAA;AAAzB,SAAD,CAAX,CAAA;AACD,OAAA;AACF,KAAA;;AAED,IAAA,OAAO,MAAK;AACVrI,MAAAA,oBAAoB,GAAG,IAAvB,CAAA;AACAE,MAAAA,iBAAiB,GAAG,IAApB,CAAA;AACAD,MAAAA,uBAAuB,GAAG,IAA1B,CAAA;KAHF,CAAA;AAKD,GAAA;;AAED,EAAA,SAASyD,kBAAT,CACEpT,QADF,EAEE2F,OAFF,EAEmC;AAEjC,IAAA,IAAI+J,oBAAoB,IAAIC,uBAAxB,IAAmDC,iBAAvD,EAA0E;AACxE,MAAA,IAAIoI,WAAW,GAAGrS,OAAO,CAAC7G,GAAR,CAAaoR,CAAD,IAC5B+H,qBAAqB,CAAC/H,CAAD,EAAIpQ,KAAK,CAAC6Q,UAAV,CADL,CAAlB,CAAA;MAGA,IAAI5Q,GAAG,GAAG4P,uBAAuB,CAAC3P,QAAD,EAAWgY,WAAX,CAAvB,IAAkDhY,QAAQ,CAACD,GAArE,CAAA;AACA2P,MAAAA,oBAAoB,CAAC3P,GAAD,CAApB,GAA4B6P,iBAAiB,EAA7C,CAAA;AACD,KAAA;AACF,GAAA;;AAED,EAAA,SAAS8C,sBAAT,CACE1S,QADF,EAEE2F,OAFF,EAEmC;AAEjC,IAAA,IAAI+J,oBAAoB,IAAIC,uBAAxB,IAAmDC,iBAAvD,EAA0E;AACxE,MAAA,IAAIoI,WAAW,GAAGrS,OAAO,CAAC7G,GAAR,CAAaoR,CAAD,IAC5B+H,qBAAqB,CAAC/H,CAAD,EAAIpQ,KAAK,CAAC6Q,UAAV,CADL,CAAlB,CAAA;MAGA,IAAI5Q,GAAG,GAAG4P,uBAAuB,CAAC3P,QAAD,EAAWgY,WAAX,CAAvB,IAAkDhY,QAAQ,CAACD,GAArE,CAAA;AACA,MAAA,IAAIgY,CAAC,GAAGrI,oBAAoB,CAAC3P,GAAD,CAA5B,CAAA;;AACA,MAAA,IAAI,OAAOgY,CAAP,KAAa,QAAjB,EAA2B;AACzB,QAAA,OAAOA,CAAP,CAAA;AACD,OAAA;AACF,KAAA;;AACD,IAAA,OAAO,IAAP,CAAA;AACD,GAAA;;AAED1H,EAAAA,MAAM,GAAG;AACP,IAAA,IAAI/K,QAAJ,GAAY;MACV,OAAOoG,IAAI,CAACpG,QAAZ,CAAA;KAFK;;AAIP,IAAA,IAAIxF,KAAJ,GAAS;AACP,MAAA,OAAOA,KAAP,CAAA;KALK;;AAOP,IAAA,IAAIyE,MAAJ,GAAU;AACR,MAAA,OAAOgL,UAAP,CAAA;KARK;;IAUPwC,UAVO;IAWPlE,SAXO;IAYP8J,uBAZO;IAaPhF,QAbO;IAcPmD,KAdO;IAeP9C,UAfO;IAgBPxS,UAhBO;IAiBPqV,UAjBO;IAkBP1D,aAlBO;IAmBPF,OAnBO;AAoBPiG,IAAAA,yBAAyB,EAAE1G,gBApBpB;AAqBP2G,IAAAA,wBAAwB,EAAErG,eAAAA;GArB5B,CAAA;AAwBA,EAAA,OAAOzB,MAAP,CAAA;AACD;AAGD;AACA;AACA;;AAEM,SAAU+H,4BAAV,CACJ7T,MADI,EACyB;EAE7BQ,SAAS,CACPR,MAAM,CAACnF,MAAP,GAAgB,CADT,EAEP,2EAFO,CAAT,CAAA;AAKA,EAAA,IAAImQ,UAAU,GAAGjL,yBAAyB,CAACC,MAAD,CAA1C,CAAA;;EAEA,eAAe8T,KAAf,CACE5E,OADF,EACkB;IAEhB,IAAI;MAAEzT,QAAF;AAAYkU,MAAAA,MAAAA;AAAZ,KAAA,GAAuB,MAAMoE,SAAS,CAAC7E,OAAD,CAA1C,CAAA;;IACA,IAAIS,MAAM,YAAYlI,QAAtB,EAAgC;AAC9B,MAAA,OAAOkI,MAAP,CAAA;AACD,KALe;AAOhB;AACA;;;AACA,IAAA,OAAA,QAAA,CAAA;AAASlU,MAAAA,QAAAA;AAAT,KAAA,EAAsBkU,MAAtB,CAAA,CAAA;AACD,GAAA;;AAED,EAAA,eAAeqE,UAAf,CAA0B9E,OAA1B,EAA4CuB,OAA5C,EAA2D;IACzD,IAAI;AAAEd,MAAAA,MAAAA;AAAF,KAAA,GAAa,MAAMoE,SAAS,CAAC7E,OAAD,EAAUuB,OAAV,CAAhC,CAAA;;IACA,IAAId,MAAM,YAAYlI,QAAtB,EAAgC;AAC9B,MAAA,OAAOkI,MAAP,CAAA;AACD,KAJwD;;;IAOzD,IAAIsE,SAAS,GAAG,CAACtE,MAAM,CAACrD,MAAR,EAAgBqD,MAAM,CAACtD,UAAvB,EAAmCsD,MAAM,CAACvD,UAA1C,CAAsD8H,CAAAA,IAAtD,CACbzK,CAAD,IAAOA,CADO,CAAhB,CAAA;IAGA,IAAInE,KAAK,GAAGtB,MAAM,CAACmQ,MAAP,CAAcF,SAAS,IAAI,EAA3B,CAA+B,CAAA,CAA/B,CAAZ,CAAA;;AAEA,IAAA,IAAIzJ,oBAAoB,CAAClF,KAAD,CAAxB,EAAiC;AAC/B,MAAA,OAAO,IAAImC,QAAJ,CAAanC,KAAK,CAAC4B,IAAnB,EAAyB;QAC9BG,MAAM,EAAE/B,KAAK,CAAC+B,MADgB;QAE9BkD,UAAU,EAAEjF,KAAK,CAACiF,UAAAA;AAFY,OAAzB,CAAP,CAAA;AAID,KAAA;;AAED,IAAA,OAAOjF,KAAP,CAAA;AACD,GAAA;;AAED,EAAA,eAAeyO,SAAf,CACE7E,OADF,EAEEuB,OAFF,EAEkB;IAKhBjQ,SAAS,CACP0O,OAAO,CAACkF,MAAR,KAAmB,MADZ,EAEP,mDAFO,CAAT,CAAA;AAIA5T,IAAAA,SAAS,CACP0O,OAAO,CAACzG,MADD,EAEP,sEAFO,CAAT,CAAA;IAKA,IAAI;MAAEhN,QAAF;MAAY2F,OAAZ;AAAqBiT,MAAAA,iBAAAA;AAArB,KAAA,GAA2CC,YAAY,CACzDpF,OADyD,EAEzDuB,OAFyD,CAA3D,CAAA;;IAKA,IAAI;AACF,MAAA,IAAI4D,iBAAJ,EAAuB;QACrB,OAAO;UAAE5Y,QAAF;AAAYkU,UAAAA,MAAM,EAAE0E,iBAAAA;SAA3B,CAAA;AACD,OAAA;;AAED,MAAA,IAAInF,OAAO,CAACkF,MAAR,KAAmB,KAAvB,EAA8B;AAC5B,QAAA,IAAIzE,MAAM,GAAG,MAAM4E,MAAM,CACvBrF,OADuB,EAEvB9N,OAFuB,EAGvByO,cAAc,CAACzO,OAAD,EAAU3F,QAAV,CAHS,EAIvBgV,OAAO,IAAI,IAJY,CAAzB,CAAA;QAMA,OAAO;UAAEhV,QAAF;AAAYkU,UAAAA,MAAAA;SAAnB,CAAA;AACD,OAAA;;AAED,MAAA,IAAIA,MAAM,GAAG,MAAM6E,aAAa,CAACtF,OAAD,EAAU9N,OAAV,EAAmBqP,OAAO,IAAI,IAA9B,CAAhC,CAAA;MACA,OAAO;QACLhV,QADK;AAELkU,QAAAA,MAAM,eACDA,MADC,EAAA;AAEJtD,UAAAA,UAAU,EAAE,IAFR;AAGJoI,UAAAA,aAAa,EAAE,EAAA;AAHX,SAAA,CAAA;OAFR,CAAA;KAhBF,CAwBE,OAAO/V,CAAP,EAAU;MACV,IAAIA,CAAC,YAAY+I,QAAjB,EAA2B;QACzB,OAAO;UAAEhM,QAAF;AAAYkU,UAAAA,MAAM,EAAEjR,CAAAA;SAA3B,CAAA;AACD,OAAA;;AACD,MAAA,MAAMA,CAAN,CAAA;AACD,KAAA;AACF,GAAA;;EAED,eAAe6V,MAAf,CACErF,OADF,EAEE9N,OAFF,EAGEwO,WAHF,EAIE8E,cAJF,EAIyB;AAEvB,IAAA,IAAI/E,MAAJ,CAAA;;AACA,IAAA,IAAI,CAACC,WAAW,CAACxP,KAAZ,CAAkBtF,MAAvB,EAA+B;MAC7B,IAAIgD,IAAI,GAAG7B,UAAU,CAAC,IAAI0Y,GAAJ,CAAQzF,OAAO,CAAClR,GAAhB,CAAD,CAArB,CAAA;AACA2R,MAAAA,MAAM,GAAGG,yBAAyB,CAAChS,IAAD,CAAlC,CAAA;AACD,KAHD,MAGO;AACL6R,MAAAA,MAAM,GAAG,MAAMI,kBAAkB,CAC/B,QAD+B,EAE/Bb,OAF+B,EAG/BU,WAH+B,EAI/B,IAJ+B,EAK/B8E,cAL+B,CAAjC,CAAA;;AAQA,MAAA,IAAIxF,OAAO,CAACzG,MAAR,CAAeU,OAAnB,EAA4B;AAC1B,QAAA,IAAIiL,MAAM,GAAGM,cAAc,GAAG,YAAH,GAAkB,OAA7C,CAAA;AACA,QAAA,MAAM,IAAIjW,KAAJ,CAAa2V,MAAb,GAAN,iBAAA,CAAA,CAAA;AACD,OAAA;AACF,KAAA;;AAED,IAAA,IAAIpE,gBAAgB,CAACL,MAAD,CAApB,EAA8B;AAC5B;AACA;AACA;AACA;AACA,MAAA,MAAM,IAAIlI,QAAJ,CAAa,IAAb,EAAmB;QACvBJ,MAAM,EAAEsI,MAAM,CAACtI,MADQ;AAEvBC,QAAAA,OAAO,EAAE;UACPsN,QAAQ,EAAEjF,MAAM,CAAClU,QAAAA;AADV,SAAA;AAFc,OAAnB,CAAN,CAAA;AAMD,KAAA;;AAED,IAAA,IAAI4U,gBAAgB,CAACV,MAAD,CAApB,EAA8B;AAC5B,MAAA,MAAM,IAAIlR,KAAJ,CAAU,qCAAV,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,IAAIiW,cAAJ,EAAoB;AAClB,MAAA,IAAIvE,aAAa,CAACR,MAAD,CAAjB,EAA2B;QACzB,IAAIS,aAAa,GAAGf,mBAAmB,CAACjO,OAAD,EAAUwO,WAAW,CAACxP,KAAZ,CAAkBE,EAA5B,CAAvC,CAAA;QACA,OAAO;UACLc,OAAO,EAAE,CAACwO,WAAD,CADJ;AAELxD,UAAAA,UAAU,EAAE,EAFP;AAGLC,UAAAA,UAAU,EAAE,IAHP;AAILC,UAAAA,MAAM,EAAE;AACN,YAAA,CAAC8D,aAAa,CAAChQ,KAAd,CAAoBE,EAArB,GAA0BqP,MAAM,CAAClQ,KAAAA;WAL9B;AAOL;AACA;AACAoV,UAAAA,UAAU,EAAE,GATP;AAULC,UAAAA,aAAa,EAAE,EAVV;AAWLL,UAAAA,aAAa,EAAE,EAAA;SAXjB,CAAA;AAaD,OAAA;;MAED,OAAO;QACLrT,OAAO,EAAE,CAACwO,WAAD,CADJ;AAELxD,QAAAA,UAAU,EAAE,EAFP;AAGLC,QAAAA,UAAU,EAAE;AAAE,UAAA,CAACuD,WAAW,CAACxP,KAAZ,CAAkBE,EAAnB,GAAwBqP,MAAM,CAACzI,IAAAA;SAHxC;AAILoF,QAAAA,MAAM,EAAE,IAJH;AAKL;AACA;AACAuI,QAAAA,UAAU,EAAE,GAPP;AAQLC,QAAAA,aAAa,EAAE,EARV;AASLL,QAAAA,aAAa,EAAE,EAAA;OATjB,CAAA;AAWD,KAAA;;AAED,IAAA,IAAItE,aAAa,CAACR,MAAD,CAAjB,EAA2B;AACzB;AACA;MACA,IAAIS,aAAa,GAAGf,mBAAmB,CAACjO,OAAD,EAAUwO,WAAW,CAACxP,KAAZ,CAAkBE,EAA5B,CAAvC,CAAA;MACA,IAAIyU,OAAO,GAAG,MAAMP,aAAa,CAACtF,OAAD,EAAU9N,OAAV,EAAmBsT,cAAnB,EAAmC;AAClE,QAAA,CAACtE,aAAa,CAAChQ,KAAd,CAAoBE,EAArB,GAA0BqP,MAAM,CAAClQ,KAAAA;OADF,CAAjC,CAJyB;;AASzB,MAAA,OAAA,QAAA,CAAA,EAAA,EACKsV,OADL,EAAA;AAEEF,QAAAA,UAAU,EAAErK,oBAAoB,CAACmF,MAAM,CAAClQ,KAAR,CAApB,GACRkQ,MAAM,CAAClQ,KAAP,CAAa4H,MADL,GAER,GAJN;AAKEgF,QAAAA,UAAU,EAAE,IALd;AAMEoI,QAAAA,aAAa,EACP9E,QAAAA,CAAAA,EAAAA,EAAAA,MAAM,CAACrI,OAAP,GAAiB;AAAE,UAAA,CAACsI,WAAW,CAACxP,KAAZ,CAAkBE,EAAnB,GAAwBqP,MAAM,CAACrI,OAAAA;AAAjC,SAAjB,GAA8D,EADvD,CAAA;AANf,OAAA,CAAA,CAAA;AAUD,KAAA;;IAED,IAAIyN,OAAO,GAAG,MAAMP,aAAa,CAACtF,OAAD,EAAU9N,OAAV,EAAmBsT,cAAnB,CAAjC,CAAA;AAEA,IAAA,OAAA,QAAA,CAAA,EAAA,EACKK,OADL,EAGMpF,MAAM,CAACkF,UAAP,GAAoB;MAAEA,UAAU,EAAElF,MAAM,CAACkF,UAAAA;AAArB,KAApB,GAAwD,EAH9D,EAAA;AAIExI,MAAAA,UAAU,EAAE;AACV,QAAA,CAACuD,WAAW,CAACxP,KAAZ,CAAkBE,EAAnB,GAAwBqP,MAAM,CAACzI,IAAAA;OALnC;AAOEuN,MAAAA,aAAa,EACP9E,QAAAA,CAAAA,EAAAA,EAAAA,MAAM,CAACrI,OAAP,GAAiB;AAAE,QAAA,CAACsI,WAAW,CAACxP,KAAZ,CAAkBE,EAAnB,GAAwBqP,MAAM,CAACrI,OAAAA;AAAjC,OAAjB,GAA8D,EADvD,CAAA;AAPf,KAAA,CAAA,CAAA;AAWD,GAAA;;EAED,eAAekN,aAAf,CACEtF,OADF,EAEE9N,OAFF,EAGEsT,cAHF,EAIEjF,kBAJF,EAIgC;AAK9B,IAAA,IAAIa,aAAa,GAAG0E,6BAA6B,CAC/C5T,OAD+C,EAE/C4C,MAAM,CAAC6O,IAAP,CAAYpD,kBAAkB,IAAI,EAAlC,CAAA,CAAsC,CAAtC,CAF+C,CAA7B,CAGlBtM,MAHkB,CAGVwI,CAAD,IAAOA,CAAC,CAACvL,KAAF,CAAQwL,MAHJ,CAApB,CAL8B;;AAW9B,IAAA,IAAI0E,aAAa,CAACzV,MAAd,KAAyB,CAA7B,EAAgC;MAC9B,OAAO;QACLuG,OADK;AAELgL,QAAAA,UAAU,EAAE,EAFP;QAGLE,MAAM,EAAEmD,kBAAkB,IAAI,IAHzB;AAILoF,QAAAA,UAAU,EAAE,GAJP;AAKLC,QAAAA,aAAa,EAAE,EAAA;OALjB,CAAA;AAOD,KAAA;;AAED,IAAA,IAAInE,OAAO,GAAG,MAAMxI,OAAO,CAACuK,GAAR,CAAY,CAC9B,GAAGpC,aAAa,CAAC/V,GAAd,CAAmBoR,CAAD,IACnBoE,kBAAkB,CAAC,QAAD,EAAWb,OAAX,EAAoBvD,CAApB,EAAuB,IAAvB,EAA6B+I,cAA7B,CADjB,CAD2B,CAAZ,CAApB,CAAA;;AAMA,IAAA,IAAIxF,OAAO,CAACzG,MAAR,CAAeU,OAAnB,EAA4B;AAC1B,MAAA,IAAIiL,MAAM,GAAGM,cAAc,GAAG,YAAH,GAAkB,OAA7C,CAAA;AACA,MAAA,MAAM,IAAIjW,KAAJ,CAAa2V,MAAb,GAAN,iBAAA,CAAA,CAAA;AACD,KA9B6B;AAiC9B;;;AACAzD,IAAAA,OAAO,CAACnP,OAAR,CAAiBmO,MAAD,IAAW;AACzB,MAAA,IAAIU,gBAAgB,CAACV,MAAD,CAApB,EAA8B;QAC5BA,MAAM,CAACuB,YAAP,CAAoB3H,MAApB,EAAA,CAAA;AACD,OAAA;AACF,KAJD,EAlC8B;;IAyC9B,IAAIwL,OAAO,GAAGE,sBAAsB,CAClC7T,OADkC,EAElCkP,aAFkC,EAGlCK,OAHkC,EAIlClB,kBAJkC,CAApC,CAAA;AAOA,IAAA,OAAA,QAAA,CAAA,EAAA,EACKsF,OADL,EAAA;AAEE3T,MAAAA,OAAAA;AAFF,KAAA,CAAA,CAAA;AAID,GAAA;;AAED,EAAA,SAASkT,YAAT,CACEY,GADF,EAEEzE,OAFF,EAEkB;IAOhB,IAAIzS,GAAG,GAAG,IAAI2W,GAAJ,CAAQO,GAAG,CAAClX,GAAZ,CAAV,CAAA;AACA,IAAA,IAAIvC,QAAQ,GAAGC,cAAc,CAAC,EAAD,EAAKQ,UAAU,CAAC8B,GAAD,CAAf,EAAsB,IAAtB,EAA4B,SAA5B,CAA7B,CAAA;AACA,IAAA,IAAIoD,OAAO,GAAGP,WAAW,CAACmK,UAAD,EAAavP,QAAb,CAAzB,CAAA;;IACA,IAAI2F,OAAO,IAAIqP,OAAf,EAAwB;AACtBrP,MAAAA,OAAO,GAAGA,OAAO,CAAC+B,MAAR,CAAgBwI,CAAD,IAAOA,CAAC,CAACvL,KAAF,CAAQE,EAAR,KAAemQ,OAArC,CAAV,CAAA;AACD,KAZe;;;IAehB,IAAI,CAACrP,OAAL,EAAc;MACZ,IAAI;AACFA,QAAAA,OAAO,EAAE2N,eADP;QAEF3O,KAFE;AAGFX,QAAAA,KAAAA;OACEgM,GAAAA,kBAAkB,CAACT,UAAD,CAJtB,CAAA;MAKA,OAAO;QACLvP,QADK;AAEL2F,QAAAA,OAAO,EAAE2N,eAFJ;AAGLsF,QAAAA,iBAAiB,EAAE;AACjBjT,UAAAA,OAAO,EAAE2N,eADQ;AAEjB3C,UAAAA,UAAU,EAAE,EAFK;AAGjBC,UAAAA,UAAU,EAAE,IAHK;AAIjBC,UAAAA,MAAM,EAAE;YACN,CAAClM,KAAK,CAACE,EAAP,GAAYb,KAAAA;WALG;AAOjBoV,UAAAA,UAAU,EAAE,GAPK;AAQjBC,UAAAA,aAAa,EAAE,EARE;AASjBL,UAAAA,aAAa,EAAE,EAAA;AATE,SAAA;OAHrB,CAAA;AAeD,KAAA;;IAED,OAAO;MAAEhZ,QAAF;AAAY2F,MAAAA,OAAAA;KAAnB,CAAA;AACD,GAAA;;EAED,OAAO;IACL4J,UADK;IAEL8I,KAFK;AAGLE,IAAAA,UAAAA;GAHF,CAAA;AAKD;AAID;AACA;AACA;;AAEA;;;AAGG;;SACamB,0BACdnV,QACA+U,SACAtV,OAAU;EAEV,IAAI2V,UAAU,gBACTL,OADS,EAAA;AAEZF,IAAAA,UAAU,EAAE,GAFA;AAGZvI,IAAAA,MAAM,EAAE;MACN,CAACyI,OAAO,CAACM,0BAAR,IAAsCrV,MAAM,CAAC,CAAD,CAAN,CAAUM,EAAjD,GAAsDb,KAAAA;AADhD,KAAA;GAHV,CAAA,CAAA;;AAOA,EAAA,OAAO2V,UAAP,CAAA;AACD;AAGD;;AACA,SAAS7G,wBAAT,CACEjT,EADF,EAEE+S,IAFF,EAE8B;AAM5B,EAAA,IAAIrP,IAAI,GAAG,OAAO1D,EAAP,KAAc,QAAd,GAAyBA,EAAzB,GAA8BY,UAAU,CAACZ,EAAD,CAAnD,CAN4B;;EAS5B,IAAI,CAAC+S,IAAD,IAAU,EAAE,YAAA,IAAgBA,IAAlB,CAAA,IAA2B,EAAE,UAAA,IAAcA,IAAhB,CAAzC,EAAiE;IAC/D,OAAO;AAAErP,MAAAA,IAAAA;KAAT,CAAA;AACD,GAX2B;;;EAc5B,IAAIqP,IAAI,CAAC3D,UAAL,IAAmB,IAAnB,IAA2B2D,IAAI,CAAC3D,UAAL,KAAoB,KAAnD,EAA0D;IACxD,OAAO;MACL1L,IADK;AAELsP,MAAAA,UAAU,EAAE;QACV5D,UAAU,EAAE2D,IAAI,CAAC3D,UADP;AAEVC,QAAAA,UAAU,EAAE1O,UAAU,CAACuB,SAAS,CAACwB,IAAD,CAAV,CAFZ;QAGV4L,WAAW,EAAE,CAAAyD,IAAI,IAAA,IAAJ,YAAAA,IAAI,CAAEzD,WAAN,KAAqB,mCAHxB;QAIVC,QAAQ,EAAEwD,IAAI,CAACxD,QAAAA;AAJL,OAAA;KAFd,CAAA;AASD,GAxB2B;;;AA2B5B,EAAA,IAAI,CAACwD,IAAI,CAACxD,QAAV,EAAoB;IAClB,OAAO;AAAE7L,MAAAA,IAAAA;KAAT,CAAA;AACD,GA7B2B;;;AAgC5B,EAAA,IAAIC,UAAU,GAAGzB,SAAS,CAACwB,IAAD,CAA1B,CAAA;;EACA,IAAI;AACF,IAAA,IAAIsW,YAAY,GAAGC,6BAA6B,CAAClH,IAAI,CAACxD,QAAN,CAAhD,CAAA;IACA5L,UAAU,CAAChC,MAAX,GAAA,GAAA,GAAwBqY,YAAxB,CAAA;GAFF,CAGE,OAAO5W,CAAP,EAAU;IACV,OAAO;MACLM,IADK;MAELS,KAAK,EAAE,IAAI6K,aAAJ,CACL,GADK,EAEL,aAFK,EAGL,0CAHK,CAAA;KAFT,CAAA;AAQD,GAAA;;EAED,OAAO;IAAEtL,IAAI,EAAE9C,UAAU,CAAC+C,UAAD,CAAA;GAAzB,CAAA;AACD,CAAA;;AAED,SAAS+R,iBAAT,CACEzV,KADF,EAEE8O,QAFF,EAE0B;EAExB,IAAI;IAAEK,UAAF;IAAcC,UAAd;IAA0BC,WAA1B;AAAuCC,IAAAA,QAAAA;GAAatP,GAAAA,KAAK,CAACyQ,UAA9D,CAAA;AACA,EAAA,IAAIA,UAAU,GAAgC;AAC5CzQ,IAAAA,KAAK,EAAE,SADqC;IAE5CE,QAAQ,EAAEC,cAAc,CAACH,KAAK,CAACE,QAAP,EAAiB4O,QAAQ,CAAC5O,QAA1B,CAFoB;IAG5CiP,UAAU,EAAEA,UAAU,IAAI/P,SAHkB;IAI5CgQ,UAAU,EAAEA,UAAU,IAAIhQ,SAJkB;IAK5CiQ,WAAW,EAAEA,WAAW,IAAIjQ,SALgB;IAM5CkQ,QAAQ,EAAEA,QAAQ,IAAIlQ,SAAAA;GANxB,CAAA;AAQA,EAAA,OAAOqR,UAAP,CAAA;AACD;AAGD;;;AACA,SAASgJ,6BAAT,CACE5T,OADF,EAEEoU,UAFF,EAEqB;EAEnB,IAAIC,eAAe,GAAGrU,OAAtB,CAAA;;AACA,EAAA,IAAIoU,UAAJ,EAAgB;AACd,IAAA,IAAI/a,KAAK,GAAG2G,OAAO,CAACsU,SAAR,CAAmB/J,CAAD,IAAOA,CAAC,CAACvL,KAAF,CAAQE,EAAR,KAAekV,UAAxC,CAAZ,CAAA;;IACA,IAAI/a,KAAK,IAAI,CAAb,EAAgB;MACdgb,eAAe,GAAGrU,OAAO,CAACjD,KAAR,CAAc,CAAd,EAAiB1D,KAAjB,CAAlB,CAAA;AACD,KAAA;AACF,GAAA;;AACD,EAAA,OAAOgb,eAAP,CAAA;AACD,CAAA;;AAED,SAASjF,gBAAT,CACEjV,KADF,EAEE6F,OAFF,EAGEkN,UAHF,EAIE7S,QAJF,EAKEqR,sBALF,EAMEC,uBANF,EAOEC,qBAPF,EAQEoC,iBARF,EASEZ,YATF,EAUElB,gBAVF,EAUgD;EAE9C,IAAIyE,YAAY,GAAGvD,YAAY,GAC3BxK,MAAM,CAACmQ,MAAP,CAAc3F,YAAd,CAA4B,CAAA,CAA5B,CAD2B,GAE3BY,iBAAiB,GACjBpL,MAAM,CAACmQ,MAAP,CAAc/E,iBAAd,CAAiC,CAAA,CAAjC,CADiB,GAEjB,IAJJ,CAF8C;;AAS9C,EAAA,IAAIoG,UAAU,GAAGhH,YAAY,GAAGxK,MAAM,CAAC6O,IAAP,CAAYrE,YAAZ,CAAA,CAA0B,CAA1B,CAAH,GAAkC7T,SAA/D,CAAA;AACA,EAAA,IAAI8a,eAAe,GAAGT,6BAA6B,CAAC5T,OAAD,EAAUoU,UAAV,CAAnD,CAAA;AACA,EAAA,IAAIG,iBAAiB,GAAGF,eAAe,CAACtS,MAAhB,CACtB,CAACW,KAAD,EAAQrJ,KAAR,KACEqJ,KAAK,CAAC1D,KAAN,CAAYwL,MAAZ,IAAsB,IAAtB,KACCgK,WAAW,CAACra,KAAK,CAAC6Q,UAAP,EAAmB7Q,KAAK,CAAC6F,OAAN,CAAc3G,KAAd,CAAnB,EAAyCqJ,KAAzC,CAAX;AAECiJ,EAAAA,uBAAuB,CAAC7J,IAAxB,CAA8B5C,EAAD,IAAQA,EAAE,KAAKwD,KAAK,CAAC1D,KAAN,CAAYE,EAAxD,CAFD,IAGCuV,sBAAsB,CACpBta,KAAK,CAACE,QADc,EAEpBF,KAAK,CAAC6F,OAAN,CAAc3G,KAAd,CAFoB,EAGpB6T,UAHoB,EAIpB7S,QAJoB,EAKpBqI,KALoB,EAMpBgJ,sBANoB,EAOpBiF,YAPoB,CAJxB,CAFoB,CAAxB,CAX8C;;EA6B9C,IAAIxB,oBAAoB,GAA0B,EAAlD,CAAA;EACAjD,gBAAgB,IAAA,IAAhB,YAAAA,gBAAgB,CAAE9L,OAAlB,CAA0B,CAAA,MAAA,EAAgBhG,GAAhB,KAAuB;AAAA,IAAA,IAAtB,CAACsC,IAAD,EAAOgG,KAAP,CAAsB,GAAA,MAAA,CAAA;;AAC/C;AACA,IAAA,IAAIkJ,qBAAqB,CAAC8I,QAAtB,CAA+Bta,GAA/B,CAAJ,EAAyC;MACvC+U,oBAAoB,CAACpU,IAArB,CAA0B,CAACX,GAAD,EAAMsC,IAAN,EAAYgG,KAAZ,CAA1B,CAAA,CAAA;KADF,MAEO,IAAIgJ,sBAAJ,EAA4B;AACjC,MAAA,IAAIiJ,gBAAgB,GAAGF,sBAAsB,CAC3C/X,IAD2C,EAE3CgG,KAF2C,EAG3CwK,UAH2C,EAI3CxQ,IAJ2C,EAK3CgG,KAL2C,EAM3CgJ,sBAN2C,EAO3CiF,YAP2C,CAA7C,CAAA;;AASA,MAAA,IAAIgE,gBAAJ,EAAsB;QACpBxF,oBAAoB,CAACpU,IAArB,CAA0B,CAACX,GAAD,EAAMsC,IAAN,EAAYgG,KAAZ,CAA1B,CAAA,CAAA;AACD,OAAA;AACF,KAAA;GAjBH,CAAA,CAAA;AAoBA,EAAA,OAAO,CAAC6R,iBAAD,EAAoBpF,oBAApB,CAAP,CAAA;AACD,CAAA;;AAED,SAASqF,WAAT,CACEI,iBADF,EAEEC,YAFF,EAGEnS,KAHF,EAG+B;AAE7B,EAAA,IAAIoS,KAAK;AAEP,EAAA,CAACD,YAAD;EAEAnS,KAAK,CAAC1D,KAAN,CAAYE,EAAZ,KAAmB2V,YAAY,CAAC7V,KAAb,CAAmBE,EAJxC,CAF6B;AAS7B;;AACA,EAAA,IAAI6V,aAAa,GAAGH,iBAAiB,CAAClS,KAAK,CAAC1D,KAAN,CAAYE,EAAb,CAAjB,KAAsC3F,SAA1D,CAV6B;;EAa7B,OAAOub,KAAK,IAAIC,aAAhB,CAAA;AACD,CAAA;;AAED,SAASC,kBAAT,CACEH,YADF,EAEEnS,KAFF,EAE+B;AAAA,EAAA,IAAA,qBAAA,CAAA;;EAE7B;AAEEmS,IAAAA,YAAY,CAACta,QAAb,KAA0BmI,KAAK,CAACnI,QAAhC;AAEA;IACC,CAAAsa,CAAAA,qBAAAA,GAAAA,YAAY,CAAC7V,KAAb,CAAmBpB,IAAnB,KAAyBmG,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAAA,CAAAA,QAAzB,CAAkC,GAAlC,CAAA,KACC8Q,YAAY,CAAChS,MAAb,CAAoB,GAApB,CAAA,KAA6BH,KAAK,CAACG,MAAN,CAAa,GAAb,CAAA;AANjC,IAAA;AAQD,CAAA;;AAED,SAAS4R,sBAAT,CACEQ,eADF,EAEEJ,YAFF,EAGE3H,UAHF,EAIE7S,QAJF,EAKEqI,KALF,EAMEgJ,sBANF,EAOEiF,YAPF,EAOsC;AAEpC,EAAA,IAAIuE,UAAU,GAAGC,SAAS,CAACF,eAAD,CAA1B,CAAA;AACA,EAAA,IAAIG,aAAa,GAAGP,YAAY,CAAChS,MAAjC,CAAA;AACA,EAAA,IAAIwS,OAAO,GAAGF,SAAS,CAAC9a,QAAD,CAAvB,CAAA;AACA,EAAA,IAAIib,UAAU,GAAG5S,KAAK,CAACG,MAAvB,CALoC;AAQpC;AACA;AACA;AACA;AACA;;EACA,IAAI0S,uBAAuB,GACzBP,kBAAkB,CAACH,YAAD,EAAenS,KAAf,CAAlB;AAEAwS,EAAAA,UAAU,CAACzX,QAAX,EAAA,KAA0B4X,OAAO,CAAC5X,QAAR,EAF1B;AAIAyX,EAAAA,UAAU,CAACrZ,MAAX,KAAsBwZ,OAAO,CAACxZ,MAJ9B;EAMA6P,sBAPF,CAAA;;AASA,EAAA,IAAIhJ,KAAK,CAAC1D,KAAN,CAAY2V,gBAAhB,EAAkC;AAChC,IAAA,IAAIa,WAAW,GAAG9S,KAAK,CAAC1D,KAAN,CAAY2V,gBAAZ,CAAA,QAAA,CAAA;MAChBO,UADgB;MAEhBE,aAFgB;MAGhBC,OAHgB;AAIhBC,MAAAA,UAAAA;AAJgB,KAAA,EAKbpI,UALa,EAAA;MAMhByD,YANgB;AAOhB4E,MAAAA,uBAAAA;KAPF,CAAA,CAAA,CAAA;;AASA,IAAA,IAAI,OAAOC,WAAP,KAAuB,SAA3B,EAAsC;AACpC,MAAA,OAAOA,WAAP,CAAA;AACD,KAAA;AACF,GAAA;;AAED,EAAA,OAAOD,uBAAP,CAAA;AACD,CAAA;;AAED,eAAe5G,kBAAf,CACE8G,IADF,EAEE3H,OAFF,EAGEpL,KAHF,EAIEgT,aAJF,EAKEpC,cALF,EAKiC;AAAA,EAAA,IAD/BoC,aAC+B,KAAA,KAAA,CAAA,EAAA;AAD/BA,IAAAA,aAC+B,GADN,KACM,CAAA;AAAA,GAAA;;AAAA,EAAA,IAA/BpC,cAA+B,KAAA,KAAA,CAAA,EAAA;AAA/BA,IAAAA,cAA+B,GAAL,KAAK,CAAA;AAAA,GAAA;;AAE/B,EAAA,IAAIqC,UAAJ,CAAA;EACA,IAAIpH,MAAJ,CAH+B;;AAM/B,EAAA,IAAI1H,MAAJ,CAAA;AACA,EAAA,IAAIC,YAAY,GAAG,IAAIC,OAAJ,CAAY,CAAC9D,CAAD,EAAI+D,CAAJ,KAAWH,MAAM,GAAGG,CAAhC,CAAnB,CAAA;;AACA,EAAA,IAAI4O,QAAQ,GAAG,MAAM/O,MAAM,EAA3B,CAAA;;AACAiH,EAAAA,OAAO,CAACzG,MAAR,CAAe7I,gBAAf,CAAgC,OAAhC,EAAyCoX,QAAzC,CAAA,CAAA;;EAEA,IAAI;AACF,IAAA,IAAIC,OAAO,GAAGnT,KAAK,CAAC1D,KAAN,CAAYyW,IAAZ,CAAd,CAAA;IACArW,SAAS,CACPyW,OADO,EAAA,qBAAA,GAEeJ,IAFf,GAAA,mBAAA,GAEsC/S,KAAK,CAAC1D,KAAN,CAAYE,EAFlD,GAAT,UAAA,CAAA,CAAA;IAKAqP,MAAM,GAAG,MAAMxH,OAAO,CAACU,IAAR,CAAa,CAC1BoO,OAAO,CAAC;MAAE/H,OAAF;MAAWjL,MAAM,EAAEH,KAAK,CAACG,MAAAA;AAAzB,KAAD,CADmB,EAE1BiE,YAF0B,CAAb,CAAf,CAAA;GAPF,CAWE,OAAOxJ,CAAP,EAAU;IACVqY,UAAU,GAAGjX,UAAU,CAACL,KAAxB,CAAA;AACAkQ,IAAAA,MAAM,GAAGjR,CAAT,CAAA;AACD,GAdD,SAcU;AACRwQ,IAAAA,OAAO,CAACzG,MAAR,CAAe5I,mBAAf,CAAmC,OAAnC,EAA4CmX,QAA5C,CAAA,CAAA;AACD,GAAA;;EAED,IAAIrH,MAAM,YAAYlI,QAAtB,EAAgC;AAAA,IAAA,IAAA,mBAAA,CAAA;;AAC9B;AACA,IAAA,IAAIJ,MAAM,GAAGsI,MAAM,CAACtI,MAApB,CAAA;IACA,IAAI5L,QAAQ,GAAGkU,MAAM,CAACrI,OAAP,CAAe4B,GAAf,CAAmB,UAAnB,CAAf,CAH8B;AAM9B;;AACA,IAAA,IAAIwL,cAAJ,EAAoB;AAClB,MAAA,MAAM/E,MAAN,CAAA;AACD,KAAA;;IAED,IAAItI,MAAM,IAAI,GAAV,IAAiBA,MAAM,IAAI,GAA3B,IAAkC5L,QAAQ,IAAI,IAAlD,EAAwD;AACtD;AACA;AACA;AACA,MAAA,IAAIqb,aAAJ,EAAmB;AACjB,QAAA,MAAMnH,MAAN,CAAA;AACD,OAAA;;MACD,OAAO;QACLkH,IAAI,EAAE/W,UAAU,CAACuK,QADZ;QAELhD,MAFK;QAGL5L,QAHK;QAILgT,UAAU,EAAEkB,MAAM,CAACrI,OAAP,CAAe4B,GAAf,CAAmB,oBAAnB,CAA6C,KAAA,IAAA;OAJ3D,CAAA;AAMD,KAAA;;AAED,IAAA,IAAIhC,IAAJ,CAAA;;AACA,IAAA,IAAA,CAAA,mBAAA,GAAIyI,MAAM,CAACrI,OAAP,CAAe4B,GAAf,CAAmB,cAAnB,CAAJ,KAAA,IAAA,IAAI,mBAAoCrH,CAAAA,UAApC,CAA+C,kBAA/C,CAAJ,EAAwE;AACtEqF,MAAAA,IAAI,GAAG,MAAMyI,MAAM,CAAC1I,IAAP,EAAb,CAAA;AACD,KAFD,MAEO;AACLC,MAAAA,IAAI,GAAG,MAAMyI,MAAM,CAACuH,IAAP,EAAb,CAAA;AACD,KAAA;;AAED,IAAA,IAAIH,UAAU,KAAKjX,UAAU,CAACL,KAA9B,EAAqC;MACnC,OAAO;AACLoX,QAAAA,IAAI,EAAEE,UADD;QAELtX,KAAK,EAAE,IAAI6K,aAAJ,CAAkBjD,MAAlB,EAA0BsI,MAAM,CAACpF,UAAjC,EAA6CrD,IAA7C,CAFF;QAGLI,OAAO,EAAEqI,MAAM,CAACrI,OAAAA;OAHlB,CAAA;AAKD,KAAA;;IAED,OAAO;MACLuP,IAAI,EAAE/W,UAAU,CAACoH,IADZ;MAELA,IAFK;MAGL2N,UAAU,EAAElF,MAAM,CAACtI,MAHd;MAILC,OAAO,EAAEqI,MAAM,CAACrI,OAAAA;KAJlB,CAAA;AAMD,GAAA;;AAED,EAAA,IAAIyP,UAAU,KAAKjX,UAAU,CAACL,KAA9B,EAAqC;IACnC,OAAO;AAAEoX,MAAAA,IAAI,EAAEE,UAAR;AAAoBtX,MAAAA,KAAK,EAAEkQ,MAAAA;KAAlC,CAAA;AACD,GAAA;;EAED,IAAIA,MAAM,YAAYhI,YAAtB,EAAoC;IAClC,OAAO;MAAEkP,IAAI,EAAE/W,UAAU,CAACqX,QAAnB;AAA6BjG,MAAAA,YAAY,EAAEvB,MAAAA;KAAlD,CAAA;AACD,GAAA;;EAED,OAAO;IAAEkH,IAAI,EAAE/W,UAAU,CAACoH,IAAnB;AAAyBA,IAAAA,IAAI,EAAEyI,MAAAA;GAAtC,CAAA;AACD,CAAA;;AAED,SAASR,aAAT,CACE1T,QADF,EAEEgN,MAFF,EAGE6F,UAHF,EAGyB;EAEvB,IAAItQ,GAAG,GAAGuY,SAAS,CAAC9a,QAAD,CAAT,CAAoBoD,QAApB,EAAV,CAAA;AACA,EAAA,IAAIsI,IAAI,GAAgB;AAAEsB,IAAAA,MAAAA;GAA1B,CAAA;;AAEA,EAAA,IAAI6F,UAAJ,EAAgB;IACd,IAAI;MAAE5D,UAAF;MAAcE,WAAd;AAA2BC,MAAAA,QAAAA;AAA3B,KAAA,GAAwCyD,UAA5C,CAAA;AACAnH,IAAAA,IAAI,CAACiN,MAAL,GAAc1J,UAAU,CAAC0M,WAAX,EAAd,CAAA;AACAjQ,IAAAA,IAAI,CAACkQ,IAAL,GACEzM,WAAW,KAAK,mCAAhB,GACI2K,6BAA6B,CAAC1K,QAAD,CADjC,GAEIA,QAHN,CAAA;AAID,GAZsB;;;AAevB,EAAA,OAAO,IAAIyM,OAAJ,CAAYtZ,GAAZ,EAAiBmJ,IAAjB,CAAP,CAAA;AACD,CAAA;;AAED,SAASoO,6BAAT,CAAuC1K,QAAvC,EAAyD;AACvD,EAAA,IAAIyK,YAAY,GAAG,IAAIiC,eAAJ,EAAnB,CAAA;;EAEA,KAAK,IAAI,CAAC/b,GAAD,EAAM8J,KAAN,CAAT,IAAyBuF,QAAQ,CAACvQ,OAAT,EAAzB,EAA6C;IAC3CkG,SAAS,CACP,OAAO8E,KAAP,KAAiB,QADV,EAEP,kFAAA,GACE,2CAHK,CAAT,CAAA;AAKAgQ,IAAAA,YAAY,CAACkC,MAAb,CAAoBhc,GAApB,EAAyB8J,KAAzB,CAAA,CAAA;AACD,GAAA;;AAED,EAAA,OAAOgQ,YAAP,CAAA;AACD,CAAA;;AAED,SAASL,sBAAT,CACE7T,OADF,EAEEkP,aAFF,EAGEK,OAHF,EAIEnC,YAJF,EAKEjB,eALF,EAK6C;AAO3C;EACA,IAAInB,UAAU,GAA8B,EAA5C,CAAA;EACA,IAAIE,MAAM,GAAiC,IAA3C,CAAA;AACA,EAAA,IAAIuI,UAAJ,CAAA;EACA,IAAI4C,UAAU,GAAG,KAAjB,CAAA;AACA,EAAA,IAAI3C,aAAa,GAA4B,EAA7C,CAZ2C;;AAe3CnE,EAAAA,OAAO,CAACnP,OAAR,CAAgB,CAACmO,MAAD,EAASlV,KAAT,KAAkB;IAChC,IAAI6F,EAAE,GAAGgQ,aAAa,CAAC7V,KAAD,CAAb,CAAqB2F,KAArB,CAA2BE,EAApC,CAAA;IACAE,SAAS,CACP,CAACwP,gBAAgB,CAACL,MAAD,CADV,EAEP,qDAFO,CAAT,CAAA;;AAIA,IAAA,IAAIQ,aAAa,CAACR,MAAD,CAAjB,EAA2B;AACzB;AACA;AACA,MAAA,IAAIS,aAAa,GAAGf,mBAAmB,CAACjO,OAAD,EAAUd,EAAV,CAAvC,CAAA;AACA,MAAA,IAAIb,KAAK,GAAGkQ,MAAM,CAAClQ,KAAnB,CAJyB;AAMzB;AACA;;AACA,MAAA,IAAI+O,YAAJ,EAAkB;QAChB/O,KAAK,GAAGuE,MAAM,CAACmQ,MAAP,CAAc3F,YAAd,CAAA,CAA4B,CAA5B,CAAR,CAAA;AACAA,QAAAA,YAAY,GAAG7T,SAAf,CAAA;AACD,OAAA;;MACD2R,MAAM,GAAGtI,MAAM,CAACtE,MAAP,CAAc4M,MAAM,IAAI,EAAxB,EAA4B;AACnC,QAAA,CAAC8D,aAAa,CAAChQ,KAAd,CAAoBE,EAArB,GAA0Bb,KAAAA;OADnB,CAAT,CAZyB;AAgBzB;;MACA,IAAI,CAACgY,UAAL,EAAiB;AACfA,QAAAA,UAAU,GAAG,IAAb,CAAA;AACA5C,QAAAA,UAAU,GAAGrK,oBAAoB,CAACmF,MAAM,CAAClQ,KAAR,CAApB,GACTkQ,MAAM,CAAClQ,KAAP,CAAa4H,MADJ,GAET,GAFJ,CAAA;AAGD,OAAA;;MACD,IAAIsI,MAAM,CAACrI,OAAX,EAAoB;AAClBwN,QAAAA,aAAa,CAACxU,EAAD,CAAb,GAAoBqP,MAAM,CAACrI,OAA3B,CAAA;AACD,OAAA;AACF,KA1BD,MA0BO,IAAI+I,gBAAgB,CAACV,MAAD,CAApB,EAA8B;MACnCpC,eAAe,IAAA,IAAf,GAAAA,KAAAA,CAAAA,GAAAA,eAAe,CAAE/F,GAAjB,CAAqBlH,EAArB,EAAyBqP,MAAM,CAACuB,YAAhC,CAAA,CAAA;MACA9E,UAAU,CAAC9L,EAAD,CAAV,GAAiBqP,MAAM,CAACuB,YAAP,CAAoBhK,IAArC,CAFmC;AAIpC,KAJM,MAIA;MACLkF,UAAU,CAAC9L,EAAD,CAAV,GAAiBqP,MAAM,CAACzI,IAAxB,CADK;AAGL;;MACA,IAAIyI,MAAM,CAACkF,UAAP,KAAsB,GAAtB,IAA6B,CAAC4C,UAAlC,EAA8C;QAC5C5C,UAAU,GAAGlF,MAAM,CAACkF,UAApB,CAAA;AACD,OAAA;;MACD,IAAIlF,MAAM,CAACrI,OAAX,EAAoB;AAClBwN,QAAAA,aAAa,CAACxU,EAAD,CAAb,GAAoBqP,MAAM,CAACrI,OAA3B,CAAA;AACD,OAAA;AACF,KAAA;AACF,GA/CD,EAf2C;AAiE3C;;AACA,EAAA,IAAIkH,YAAJ,EAAkB;AAChBlC,IAAAA,MAAM,GAAGkC,YAAT,CAAA;AACD,GAAA;;EAED,OAAO;IACLpC,UADK;IAELE,MAFK;IAGLuI,UAAU,EAAEA,UAAU,IAAI,GAHrB;AAILC,IAAAA,aAAAA;GAJF,CAAA;AAMD,CAAA;;AAED,SAAS7D,iBAAT,CACE1V,KADF,EAEE6F,OAFF,EAGEkP,aAHF,EAIEK,OAJF,EAKEnC,YALF,EAME+B,oBANF,EAOEM,cAPF,EAQEtD,eARF,EAQ4C;EAK1C,IAAI;IAAEnB,UAAF;AAAcE,IAAAA,MAAAA;AAAd,GAAA,GAAyB2I,sBAAsB,CACjD7T,OADiD,EAEjDkP,aAFiD,EAGjDK,OAHiD,EAIjDnC,YAJiD,EAKjDjB,eALiD,CAAnD,CAL0C;;AAc1C,EAAA,KAAK,IAAI9S,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG8V,oBAAoB,CAAC1V,MAAjD,EAAyDJ,KAAK,EAA9D,EAAkE;IAChE,IAAI,CAACe,GAAD,GAAQsI,KAAR,IAAiByM,oBAAoB,CAAC9V,KAAD,CAAzC,CAAA;AACA+F,IAAAA,SAAS,CACPqQ,cAAc,KAAKlW,SAAnB,IAAgCkW,cAAc,CAACpW,KAAD,CAAd,KAA0BE,SADnD,EAEP,2CAFO,CAAT,CAAA;AAIA,IAAA,IAAIgV,MAAM,GAAGkB,cAAc,CAACpW,KAAD,CAA3B,CANgE;;AAShE,IAAA,IAAI0V,aAAa,CAACR,MAAD,CAAjB,EAA2B;AAAA,MAAA,IAAA,OAAA,CAAA;;AACzB,MAAA,IAAIS,aAAa,GAAGf,mBAAmB,CAAC9T,KAAK,CAAC6F,OAAP,EAAgB0C,KAAK,CAAC1D,KAAN,CAAYE,EAA5B,CAAvC,CAAA;;MACA,IAAI,EAAA,CAAA,OAAA,GAACgM,MAAD,KAAA,IAAA,IAAC,OAAS8D,CAAAA,aAAa,CAAChQ,KAAd,CAAoBE,EAA7B,CAAD,CAAJ,EAAuC;AACrCgM,QAAAA,MAAM,gBACDA,MADC,EAAA;AAEJ,UAAA,CAAC8D,aAAa,CAAChQ,KAAd,CAAoBE,EAArB,GAA0BqP,MAAM,CAAClQ,KAAAA;SAFnC,CAAA,CAAA;AAID,OAAA;;AACDlE,MAAAA,KAAK,CAACgR,QAAN,CAAenD,MAAf,CAAsB5N,GAAtB,CAAA,CAAA;AACD,KATD,MASO,IAAIwU,gBAAgB,CAACL,MAAD,CAApB,EAA8B;AACnC;AACA;AACA,MAAA,MAAM,IAAIlR,KAAJ,CAAU,yCAAV,CAAN,CAAA;AACD,KAJM,MAIA,IAAI4R,gBAAgB,CAACV,MAAD,CAApB,EAA8B;AACnC;AACA;AACA,MAAA,MAAM,IAAIlR,KAAJ,CAAU,iCAAV,CAAN,CAAA;AACD,KAJM,MAIA;AACL,MAAA,IAAI4T,WAAW,GAA0B;AACvC9W,QAAAA,KAAK,EAAE,MADgC;QAEvC2L,IAAI,EAAEyI,MAAM,CAACzI,IAF0B;AAGvCwD,QAAAA,UAAU,EAAE/P,SAH2B;AAIvCgQ,QAAAA,UAAU,EAAEhQ,SAJ2B;AAKvCiQ,QAAAA,WAAW,EAAEjQ,SAL0B;AAMvCkQ,QAAAA,QAAQ,EAAElQ,SAAAA;OANZ,CAAA;AAQAY,MAAAA,KAAK,CAACgR,QAAN,CAAe/E,GAAf,CAAmBhM,GAAnB,EAAwB6W,WAAxB,CAAA,CAAA;AACD,KAAA;AACF,GAAA;;EAED,OAAO;IAAEjG,UAAF;AAAcE,IAAAA,MAAAA;GAArB,CAAA;AACD,CAAA;;AAED,SAAS4B,eAAT,CACE9B,UADF,EAEE6B,aAFF,EAGE7M,OAHF,EAGmC;EAEjC,IAAIsW,gBAAgB,GAAQzJ,QAAAA,CAAAA,EAAAA,EAAAA,aAAR,CAApB,CAAA;;AACA7M,EAAAA,OAAO,CAACI,OAAR,CAAiBsC,KAAD,IAAU;AACxB,IAAA,IAAIxD,EAAE,GAAGwD,KAAK,CAAC1D,KAAN,CAAYE,EAArB,CAAA;;AACA,IAAA,IAAI2N,aAAa,CAAC3N,EAAD,CAAb,KAAsB3F,SAAtB,IAAmCyR,UAAU,CAAC9L,EAAD,CAAV,KAAmB3F,SAA1D,EAAqE;AACnE+c,MAAAA,gBAAgB,CAACpX,EAAD,CAAhB,GAAuB8L,UAAU,CAAC9L,EAAD,CAAjC,CAAA;AACD,KAAA;GAJH,CAAA,CAAA;AAMA,EAAA,OAAOoX,gBAAP,CAAA;AACD;AAGD;AACA;;;AACA,SAASrI,mBAAT,CACEjO,OADF,EAEEqP,OAFF,EAEkB;AAEhB,EAAA,IAAIkH,eAAe,GAAGlH,OAAO,GACzBrP,OAAO,CAACjD,KAAR,CAAc,CAAd,EAAiBiD,OAAO,CAACsU,SAAR,CAAmB/J,CAAD,IAAOA,CAAC,CAACvL,KAAF,CAAQE,EAAR,KAAemQ,OAAxC,CAAmD,GAAA,CAApE,CADyB,GAEzB,CAAC,GAAGrP,OAAJ,CAFJ,CAAA;AAGA,EAAA,OACEuW,eAAe,CAACC,OAAhB,GAA0B1D,IAA1B,CAAgCvI,CAAD,IAAOA,CAAC,CAACvL,KAAF,CAAQyX,gBAAR,KAA6B,IAAnE,KACAzW,OAAO,CAAC,CAAD,CAFT,CAAA;AAID,CAAA;;AAED,SAASqK,kBAAT,CAA4BzL,MAA5B,EAA6D;AAK3D;EACA,IAAII,KAAK,GAAGJ,MAAM,CAACkU,IAAP,CACT9L,CAAD,IAAOA,CAAC,CAAC3N,KAAF,IAAW2N,CAAC,CAACpJ,IAAF,KAAW,EAAtB,IAA4BoJ,CAAC,CAACpJ,IAAF,KAAW,GADpC,CAEP,IAAA;AACHsB,IAAAA,EAAE,EAAE,oBAAA;GAHN,CAAA;EAMA,OAAO;AACLc,IAAAA,OAAO,EAAE,CACP;AACE6C,MAAAA,MAAM,EAAE,EADV;AAEEtI,MAAAA,QAAQ,EAAE,EAFZ;AAGEuI,MAAAA,YAAY,EAAE,EAHhB;AAIE9D,MAAAA,KAAAA;AAJF,KADO,CADJ;IASLA,KATK;IAULX,KAAK,EAAE,IAAI6K,aAAJ,CAAkB,GAAlB,EAAuB,WAAvB,EAAoC,IAApC,CAAA;GAVT,CAAA;AAYD,CAAA;;AAED,SAASwF,yBAAT,CAAmC9Q,IAAnC,EAA0D;AACxD,EAAA,IAAIlB,IAAI,GAAG,OAAOkB,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkC/C,UAAU,CAAC+C,IAAD,CAAvD,CAAA;AACAT,EAAAA,OAAO,CAACC,IAAR,CACE,0EACE,6DADF,IAAA,GAAA,GAEMV,IAFN,GADF,GAAA,CAAA,CAAA,CAAA;EAKA,OAAO;IACL+Y,IAAI,EAAE/W,UAAU,CAACL,KADZ;IAELA,KAAK,EAAE,IAAI6K,aAAJ,CACL,GADK,EAEL,oBAFK,4BAGmBxM,IAHnB,GAAA,GAAA,CAAA;GAFT,CAAA;AAQD;;;AAGD,SAASiT,YAAT,CAAsBJ,OAAtB,EAA2C;AACzC,EAAA,KAAK,IAAItP,CAAC,GAAGsP,OAAO,CAAC9V,MAAR,GAAiB,CAA9B,EAAiCwG,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;AAC5C,IAAA,IAAIsO,MAAM,GAAGgB,OAAO,CAACtP,CAAD,CAApB,CAAA;;AACA,IAAA,IAAI2O,gBAAgB,CAACL,MAAD,CAApB,EAA8B;AAC5B,MAAA,OAAOA,MAAP,CAAA;AACD,KAAA;AACF,GAAA;AACF;;;AAGD,SAAS1T,UAAT,CAAoBR,QAApB,EAA4D;AAC1D,EAAA,OAAO,CAACA,QAAQ,CAACE,QAAT,IAAqB,EAAtB,KAA6BF,QAAQ,CAACwB,MAAT,IAAmB,EAAhD,CAAP,CAAA;AACD,CAAA;;AAED,SAASgS,gBAAT,CAA0B7M,CAA1B,EAAuCC,CAAvC,EAAkD;EAChD,OACED,CAAC,CAACzG,QAAF,KAAe0G,CAAC,CAAC1G,QAAjB,IAA6ByG,CAAC,CAACnF,MAAF,KAAaoF,CAAC,CAACpF,MAA5C,IAAsDmF,CAAC,CAAClF,IAAF,KAAWmF,CAAC,CAACnF,IADrE,CAAA;AAGD,CAAA;;AAED,SAASmT,gBAAT,CAA0BV,MAA1B,EAA4C;AAC1C,EAAA,OAAOA,MAAM,CAACkH,IAAP,KAAgB/W,UAAU,CAACqX,QAAlC,CAAA;AACD,CAAA;;AAED,SAAShH,aAAT,CAAuBR,MAAvB,EAAyC;AACvC,EAAA,OAAOA,MAAM,CAACkH,IAAP,KAAgB/W,UAAU,CAACL,KAAlC,CAAA;AACD,CAAA;;AAED,SAASuQ,gBAAT,CAA0BL,MAA1B,EAA6C;EAC3C,OAAO,CAAAA,MAAM,IAAA,IAAN,GAAAA,KAAAA,CAAAA,GAAAA,MAAM,CAAEkH,IAAR,MAAiB/W,UAAU,CAACuK,QAAnC,CAAA;AACD,CAAA;;AAED,eAAesI,sBAAf,CACEH,cADF,EAEElC,aAFF,EAGEK,OAHF,EAIElI,MAJF,EAKEqP,SALF,EAME9B,iBANF,EAM+B;AAE7B,EAAA,KAAK,IAAIvb,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGkW,OAAO,CAAC9V,MAApC,EAA4CJ,KAAK,EAAjD,EAAqD;AACnD,IAAA,IAAIkV,MAAM,GAAGgB,OAAO,CAAClW,KAAD,CAApB,CAAA;AACA,IAAA,IAAIqJ,KAAK,GAAGwM,aAAa,CAAC7V,KAAD,CAAzB,CAAA;AACA,IAAA,IAAIwb,YAAY,GAAGzD,cAAc,CAAC0B,IAAf,CAChBvI,CAAD,IAAOA,CAAC,CAACvL,KAAF,CAAQE,EAAR,KAAewD,KAAK,CAAC1D,KAAN,CAAYE,EADjB,CAAnB,CAAA;IAGA,IAAIyX,oBAAoB,GACtB9B,YAAY,IAAI,IAAhB,IACA,CAACG,kBAAkB,CAACH,YAAD,EAAenS,KAAf,CADnB,IAEA,CAAAkS,iBAAiB,IAAA,IAAjB,GAAAA,KAAAA,CAAAA,GAAAA,iBAAiB,CAAGlS,KAAK,CAAC1D,KAAN,CAAYE,EAAf,CAAjB,MAAwC3F,SAH1C,CAAA;;IAKA,IAAI0V,gBAAgB,CAACV,MAAD,CAAhB,KAA6BmI,SAAS,IAAIC,oBAA1C,CAAJ,EAAqE;AACnE;AACA;AACA;AACA,MAAA,MAAMzF,mBAAmB,CAAC3C,MAAD,EAASlH,MAAT,EAAiBqP,SAAjB,CAAnB,CAA+ChP,IAA/C,CAAqD6G,MAAD,IAAW;AACnE,QAAA,IAAIA,MAAJ,EAAY;UACVgB,OAAO,CAAClW,KAAD,CAAP,GAAiBkV,MAAM,IAAIgB,OAAO,CAAClW,KAAD,CAAlC,CAAA;AACD,SAAA;AACF,OAJK,CAAN,CAAA;AAKD,KAAA;AACF,GAAA;AACF,CAAA;;AAED,eAAe6X,mBAAf,CACE3C,MADF,EAEElH,MAFF,EAGEuP,MAHF,EAGgB;AAAA,EAAA,IAAdA,MAAc,KAAA,KAAA,CAAA,EAAA;AAAdA,IAAAA,MAAc,GAAL,KAAK,CAAA;AAAA,GAAA;;EAEd,IAAI7O,OAAO,GAAG,MAAMwG,MAAM,CAACuB,YAAP,CAAoBvH,WAApB,CAAgClB,MAAhC,CAApB,CAAA;;AACA,EAAA,IAAIU,OAAJ,EAAa;AACX,IAAA,OAAA;AACD,GAAA;;AAED,EAAA,IAAI6O,MAAJ,EAAY;IACV,IAAI;MACF,OAAO;QACLnB,IAAI,EAAE/W,UAAU,CAACoH,IADZ;AAELA,QAAAA,IAAI,EAAEyI,MAAM,CAACuB,YAAP,CAAoBpH,aAAAA;OAF5B,CAAA;KADF,CAKE,OAAOpL,CAAP,EAAU;AACV;MACA,OAAO;QACLmY,IAAI,EAAE/W,UAAU,CAACL,KADZ;AAELA,QAAAA,KAAK,EAAEf,CAAAA;OAFT,CAAA;AAID,KAAA;AACF,GAAA;;EAED,OAAO;IACLmY,IAAI,EAAE/W,UAAU,CAACoH,IADZ;AAELA,IAAAA,IAAI,EAAEyI,MAAM,CAACuB,YAAP,CAAoBhK,IAAAA;GAF5B,CAAA;AAID,CAAA;;AAED,SAAS+Q,kBAAT,CAA4Bhb,MAA5B,EAA0C;AACxC,EAAA,OAAO,IAAIsa,eAAJ,CAAoBta,MAApB,CAAA,CAA4Bib,MAA5B,CAAmC,OAAnC,CAA4ChV,CAAAA,IAA5C,CAAkDuG,CAAD,IAAOA,CAAC,KAAK,EAA9D,CAAP,CAAA;AACD;AAGD;;;AACA,SAASiK,qBAAT,CACE5P,KADF,EAEEsI,UAFF,EAEuB;EAErB,IAAI;IAAEhM,KAAF;IAASzE,QAAT;AAAmBsI,IAAAA,MAAAA;AAAnB,GAAA,GAA8BH,KAAlC,CAAA;EACA,OAAO;IACLxD,EAAE,EAAEF,KAAK,CAACE,EADL;IAEL3E,QAFK;IAGLsI,MAHK;AAILiD,IAAAA,IAAI,EAAEkF,UAAU,CAAChM,KAAK,CAACE,EAAP,CAJX;IAKL6X,MAAM,EAAE/X,KAAK,CAAC+X,MAAAA;GALhB,CAAA;AAOD,CAAA;;AAED,SAAStI,cAAT,CACEzO,OADF,EAEE3F,QAFF,EAE6B;AAE3B,EAAA,IAAIwB,MAAM,GACR,OAAOxB,QAAP,KAAoB,QAApB,GAA+B+B,SAAS,CAAC/B,QAAD,CAAT,CAAoBwB,MAAnD,GAA4DxB,QAAQ,CAACwB,MADvE,CAAA;;EAEA,IACEmE,OAAO,CAACA,OAAO,CAACvG,MAAR,GAAiB,CAAlB,CAAP,CAA4BuF,KAA5B,CAAkC3F,KAAlC,IACA,CAACwd,kBAAkB,CAAChb,MAAM,IAAI,EAAX,CAFrB,EAGE;IACA,OAAOmE,OAAO,CAACjD,KAAR,CAAc,CAAC,CAAf,CAAA,CAAkB,CAAlB,CAAP,CAAA;AACD,GAAA;;EACD,OAAOiD,OAAO,CAACjD,KAAR,CAAc,CAAC,CAAf,CAAA,CAAkB,CAAlB,CAAP,CAAA;AACD,CAAA;;AAED,SAASoY,SAAT,CAAmB9a,QAAnB,EAA8C;EAC5C,IAAIkC,IAAI,GACN,OAAOZ,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,MAAM,CAACtB,QAAd,KAA2B,WAA5D,GACIsB,MAAM,CAACtB,QAAP,CAAgB2c,MADpB,GAEI,mBAHN,CAAA;AAIA,EAAA,IAAIta,IAAI,GAAG,OAAOrC,QAAP,KAAoB,QAApB,GAA+BA,QAA/B,GAA0CQ,UAAU,CAACR,QAAD,CAA/D,CAAA;AACA,EAAA,OAAO,IAAIkZ,GAAJ,CAAQ7W,IAAR,EAAcH,IAAd,CAAP,CAAA;AACD;;;;"}